<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js中的小疑惑 —— class中的箭头函数</title>
      <link href="/2023/04/24/JS%E7%AC%94%E8%AE%B0/class%E4%B8%AD%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/24/JS%E7%AC%94%E8%AE%B0/class%E4%B8%AD%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在学习Node的过程中，遇到了一个小问题，在此稍稍总结一下</p><h3 id="一、ES6之前如何创建类"><a href="#一、ES6之前如何创建类" class="headerlink" title="一、ES6之前如何创建类"></a>一、ES6之前如何创建类</h3><p>尽管在ES6中class关键词已经得到全面支持，但在没有class的时候，早期版本的JavaScript是如何创建类的呢？在这里我们有必要了解，这样有帮助我们理解，在使用class关键字时，”底层”发生了什么。</p><p>使用构造函数进行创建</p><p>构造函数是一种专门用于初始化新对象的函数，构造函数要使用new关键字调用，因此构造函数本身只需要初始化新对象的状态。构造函数调用的关键在于构造函数的prototype属性将被用作新对象的原型。我们再来回忆下new关键字的底层原理吧（哈哈，貌似讲着讲着就变成回忆各种原理了，了解一下也有好处嘛）</p><blockquote><p>new操作符的原理</p><ul><li><p>1.创建一个新对象</p></li><li><p>2.空对象的内部属性 _<em>proto</em>_ 赋值为构造函数的 prototype 属性</p></li><li><p>3.将构造函数的this指向新对象</p></li><li><p>4.执行构造函数内部代码</p></li><li><p>5.返回该新对象</p></li></ul></blockquote><p>好了，扯了这么多，我们再来回来看看ES6之前一般是如何创建对象的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;小猫在唱歌&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomCat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">tomCat.<span class="title function_">sing</span>()  <span class="comment">//结果：tom小猫在唱歌</span></span><br></pre></td></tr></table></figure><p>我们创建每一个函数都有一个 prototype（原型）属性，指向一个对象。这个对象的用途是包含所有特定类型（例子是 Cat）的所有实例共享方法（sing）。</p><p>如果用ES6中的关键字class，那么上面代码就会变成这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;小猫在唱歌&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomCat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">tomCat.<span class="title function_">sing</span>()  <span class="comment">//结果：tom小猫在唱歌</span></span><br></pre></td></tr></table></figure><p>其实上面<strong>两种定义的类工作方式完全一样</strong>，理解这一点非常重要，class关键字并没有改变JavaScript类基于原型的本质，在class内部定义的普通函数（箭头函数比较特殊）会被添加到类的原型prototype中。class只能算作是一种语法糖，目的在于让程序员可以更快速地创建。</p><h3 id="二、class中的箭头函数"><a href="#二、class中的箭头函数" class="headerlink" title="二、class中的箭头函数"></a>二、class中的箭头函数</h3><p>上面我们说道，在class中使用普通函数时，普通函数会被添加到类的prototype上。但箭头函数士特殊的，当我们使用箭头函数时，箭头函数会被自动添加到构造函数constructor中。这两者有什么区别呢？我们接下来就来看一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;小猫在唱歌&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomCat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">tomCat.<span class="title function_">sing</span>()  <span class="comment">//结果：tom小猫在唱歌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用箭头函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sing = <span class="function">()=&gt;</span>&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;小狗在唱歌&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> jackDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">jackDog.<span class="title function_">sing</span>()  <span class="comment">//结果：Jack小狗在唱歌</span></span><br></pre></td></tr></table></figure><p>当我们分别输出类的原型（Cat.prototype，Dog.prototype）时，</p><blockquote><p>{constructor: ƒ, sing: ƒ}</p><p>{constructor: ƒ}</p></blockquote><p>上面表明，箭头函数的确是不会添加到原型上的。事实上啊，箭头函数会被编译到constructor里面作为this.xxx = xxx 使用。这意味着，伴随每一次类的实例化，箭头函数都将同时被实例化一次。</p><p>于是，很多人觉得这样做会出现性能问题，毕竟添加到原型上只需创建一次，所有实例就可以共享添加的方法了。</p><h3 id="三、js中的this问题"><a href="#三、js中的this问题" class="headerlink" title="三、js中的this问题"></a>三、js中的this问题</h3><h4 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1.问题引入"></a>1.问题引入</h4><p>那么，在class中使用箭头函数有什么用呢？既然它有性能问题，那么我们该如何解决呢。我们先来看一个案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用箭头函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;小狗在唱歌&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> jackDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Jack&quot;</span>) <span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> sing = jackDog.<span class="property">sing</span>  <span class="comment">//将sum的引用赋值给新变量sum </span></span><br><span class="line"><span class="title function_">sing</span>()          <span class="comment">//Uncaught TypeError: Cannot read property &#x27;sing&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>当我们运行上面的代码时，就会报错，无法正常执行。浏览器告诉我们无法从undefined上获取sing方法。这是怎么回事呢，我们稍稍修改一下，把class内部的sing方法的函数体，改为打印this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sing</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br></pre></td></tr></table></figure><p>这时我们会惊讶的发现，this居然变成了this（但如果使用我们之前的方法，用“.属性”的方式，即jackDog.sing()方式调用，这时的this为实例本身）。</p><p>这是怎么回事呢？且往下看</p><blockquote><p>每个函数都有一个隐式的 <code>this</code> 形参。将函数作为方法调用时，这个参数会被设置为用于访问该方法的对象。这和大多数[面向对象语言]中的 <code>this</code>（或 <code>self</code>）含义相同。但是 JavaScript 在「关联到对象的方法」与「独立函数」这两者之间，使用了单一的定义形式。<strong>这使 <code>this</code> 导致了许多程序员的困惑和 bug。</strong></p></blockquote><h4 id="2-函数与类中的this"><a href="#2-函数与类中的this" class="headerlink" title="2.函数与类中的this"></a>2.函数与类中的this</h4><p>看了上面的内容，是不是稍稍有点疑惑，没关系，我们再来简单的梳理一下</p><p>事实上，对于许多编程语言来说，只有类中有this，函数内部是没有thisD的。而js中每一个函数也有自己的this，于是这就造成了上面我们提到的问题。</p><ul><li>函数中的this</li></ul><p>js默认的普通函数this指向代用它的对象，如果没有调用他的对象，则其指向undefined或window（严格模式下指向undefined，非严格模式下指向window）。而箭头函数比较特殊，永远指向函数外的this。</p><ul><li>类中的this</li></ul><p>事实上， 类的方法内部如果有this，默认指向类的实例</p><p>这样我们也就能明白为什么上面this打印的内容为undefined了，由于sing()运行在全局中，其this为undefined，故出现了上述问题。进而，我们也就无法获取对应的方法或属性。我们来看一下JS创始人对此的一些说明。</p><blockquote><p>每个函数都有一个隐式的 <code>this</code> 形参。将函数作为方法调用时，这个参数会被设置为用于访问该方法的对象。这和大多数[面向对象语言]中的 <code>this</code>（或 <code>self</code>）含义相同。但是 JavaScript 在「关联到对象的方法」与「独立函数」这两者之间，使用了单一的定义形式。<strong>这使 <code>this</code> 导致了许多程序员的困惑和 bug。</strong></p></blockquote><h4 id="3-解决方法："><a href="#3-解决方法：" class="headerlink" title="3.解决方法："></a>3.解决方法：</h4><h5 id="2-1-使用箭头函数解决"><a href="#2-1-使用箭头函数解决" class="headerlink" title="2.1.使用箭头函数解决"></a>2.1.使用箭头函数解决</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用箭头函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line">sing = <span class="function">()=&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> jackDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Jack&quot;</span>) <span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> sing = jackDog.<span class="property">sing</span> <span class="comment">//将sum的引用赋值给新变量sum</span></span><br><span class="line"><span class="title function_">sing</span>()         </span><br></pre></td></tr></table></figure><p>我们分析一下原因，箭头函数中的this，只和定义该箭头函数的位置有关系，即箭头函数中的this始终是该箭头函数所在作用域中的this。在第二个部分，我们已经了解到在类中使用箭头函数时，伴随每一次类的实例化，箭头函数都将同时被实例化一次。故此处箭头函数所在的作用域中的this指向类的实例对象。</p><h5 id="2-2-使用bind绑定解决"><a href="#2-2-使用bind绑定解决" class="headerlink" title="2.2.使用bind绑定解决"></a>2.2.使用bind绑定解决</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sing</span> = <span class="variable language_">this</span>.<span class="property">sing</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)  <span class="comment">//这样当我们调用sing方法时，this就永远指向实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sing</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> jackDog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Jack&quot;</span>) <span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> sing = jackDog.<span class="property">sing</span> <span class="comment">//将sum的引用赋值给新变量sum</span></span><br><span class="line"><span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><p>两种方法的对比：使用箭头函数时，其不会添加到类的原型中，相当于在每个类被实例时，会在实例中单独的添加一个对应的方法。而使用bind绑定法，类中所定义的方法，是被添加到类的原型中，这样所有的实例可以共享这个方法。所以，如果希望追求极致的性能，可以使用bind来解决class中的this问题。</p><p>当然，如果我们再来回到底层，探究箭头函数的原理。事实上，<strong>箭头函数底层相当于.bind(); 永远绑定外部this</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中常用的居中方式</title>
      <link href="/2023/04/20/css%E7%AC%94%E8%AE%B0/01_%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
      <url>/2023/04/20/css%E7%AC%94%E8%AE%B0/01_%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>在介绍css元素居中方法时，我们先来回忆一下几种常见的元素以及他们的特点，这样有助于我们理解这些方法的原理</p><h3 id="一、几种常见的元素类型"><a href="#一、几种常见的元素类型" class="headerlink" title="一、几种常见的元素类型"></a>一、几种常见的元素类型</h3><h4 id="1-块状元素-block"><a href="#1-块状元素-block" class="headerlink" title="1.块状元素 block"></a>1.块状元素 block</h4><p>特点：</p><ul><li>每个块状元素独占一行，多个块状元素标签写在一起，默认排列方式为从上至下；</li><li>元素的宽度如果不设置的话，默认为父元素的宽度；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    // 布局结构块 </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>     // 创建一条水平线</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>      // 段落结构块</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>   // 创建 HTML 表单 </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>、<span class="tag">&lt;<span class="name">h2</span>&gt;</span>、<span class="tag">&lt;<span class="name">h3</span>&gt;</span>   // 标题结构块</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span> 、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>  // 列表结构块</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>、<span class="tag">&lt;<span class="name">thead</span>&gt;</span>、<span class="tag">&lt;<span class="name">tbody</span>&gt;</span>、<span class="tag">&lt;<span class="name">td</span>&gt;</span>、<span class="tag">&lt;<span class="name">th</span>&gt;</span>、<span class="tag">&lt;<span class="name">tr</span>&gt;</span>  // 表格</span><br></pre></td></tr></table></figure><h4 id="2-行内元素-inline"><a href="#2-行内元素-inline" class="headerlink" title="2.行内元素 inline"></a>2.行内元素 inline</h4><p>行内元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制</p><p>特点：</p><ul><li>不会独占一行，相邻的行内元素会排列在同一行里，直到一行排不下才会自动换行，其宽度随元素的内容而变化；</li></ul><p>常见行内元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>      // 超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>     // 换行 </span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>、 <span class="tag">&lt;<span class="name">i</span>&gt;</span> </span><br><span class="line">引用 、斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>、<span class="tag">&lt;<span class="name">button</span>&gt;</span>、<span class="tag">&lt;<span class="name">label</span>&gt;</span>  //表单对象包含框</span><br></pre></td></tr></table></figure><h4 id="3-行内块元素（inline-block）"><a href="#3-行内块元素（inline-block）" class="headerlink" title="3.行内块元素（inline-block）"></a>3.行内块元素（inline-block）</h4><p>inline-block元素具备了块元素与行内元素的特性，既能够设置宽高，又不独自占据一行。</p><h3 id="二、水平居中"><a href="#二、水平居中" class="headerlink" title="二、水平居中"></a>二、水平居中</h3><h4 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1.行内元素"></a>1.行内元素</h4><h5 id="1-1-方法一"><a href="#1-1-方法一" class="headerlink" title="1.1 方法一"></a>1.1 方法一</h5><p>只需要把行内元素包裹在一个属性display为block的父层元素中，并且把父层元素添加如下属性即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-块状元素"><a href="#2-块状元素" class="headerlink" title="2.块状元素"></a>2.块状元素</h4><h5 id="1-1-方法一-1"><a href="#1-1-方法一-1" class="headerlink" title="1.1 方法一"></a>1.1 方法一</h5><p>最简单的方法就是将左右外边距设置为auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">    <span class="comment">/*这里上下外边距的数值并不影响，但设置时，别忘了考虑外边距重叠的问题*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-方法二"><a href="#1-1-方法二" class="headerlink" title="1.1 方法二"></a>1.1 方法二</h5><p>父元素使用相对定位，子元素使用绝对定位后，将子元素的left和right设置为0，然后将上下margin设置为auto。（若父元素没有设置高度，记得考虑高度塌陷的问题）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*为简洁，在此省略其他样式*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、垂直居中"><a href="#三、垂直居中" class="headerlink" title="三、垂直居中"></a>三、垂直居中</h3><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>将行内元素的父元素（块元素）的line-height与height设置为相同值（这时可以直接省略父元素的height，即只设置lne-height）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、垂直水平居中"><a href="#四、垂直水平居中" class="headerlink" title="四、垂直水平居中"></a>四、垂直水平居中</h3><h4 id="1-定位"><a href="#1-定位" class="headerlink" title="1.定位"></a>1.定位</h4><p>子绝父相之后，设置水平和垂直方向上的偏移，偏移量分别为父元素宽度（高度）的一半减去子元素宽度（高度）的一半。这里使用到了**calc()**计算属性，注意使用时，在加号与减号的前后一定要有空格。</p><p><strong>使用的条件</strong>：需要知道子元素的宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.利用css的计算属性*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*2.利用margin*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定位-margin"><a href="#2-定位-margin" class="headerlink" title="2.定位+margin"></a>2.定位+margin</h4><p>与第一种方法相对，下面的方法无需知道子元素的宽高，即可实现垂直水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-定位-transform"><a href="#3-定位-transform" class="headerlink" title="3.定位+transform"></a>3.定位+transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-padding"><a href="#4-padding" class="headerlink" title="4.padding"></a>4.padding</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-flex布局"><a href="#5-flex布局" class="headerlink" title="5.flex布局"></a>5.flex布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*我们还可以这样*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件传播与事件委托</title>
      <link href="/2023/04/19/JS%E7%AC%94%E8%AE%B0/2.1_%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2023/04/19/JS%E7%AC%94%E8%AE%B0/2.1_%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h4 id="一、JS事件传播机制"><a href="#一、JS事件传播机制" class="headerlink" title="一、JS事件传播机制"></a>一、JS事件传播机制</h4><p>在JS中，一个事件触发后，会在子元素和父元素之间传播，这个过程分为三个阶段</p><ul><li><strong>捕获阶段</strong>：通俗的理解就是，当鼠标点击或者触发dom事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件。</li><li><strong>目标阶段：</strong>事件对象传递到事件目标。如果事件的type属性表明后面不会进行冒泡操作，那么事件到此就结束了。</li><li><strong>冒泡阶段：</strong>与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点。</li></ul><h4 id="1-示例引入"><a href="#1-示例引入" class="headerlink" title="1.示例引入"></a>1.示例引入</h4><p>我们先来看一段代码</p><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在此省略css样式部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;granpa&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printID</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> grandpa = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;grandpa&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> dad = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dad&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> son = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;son&#x27;</span>)</span><br><span class="line"><span class="comment">//使用addEventListener三个元素添加click事件</span></span><br><span class="line">grandpa.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,printID)</span><br><span class="line">dad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,printID)</span><br><span class="line">son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,printID)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/19/E2kyYM4taj9L1Zz.jpg" alt="2023-04-19_074832"></p><p>此时当我们点击不同元素时</p><ul><li>点击son(即黑色盒子)，依次打印 son - dad -grandpa。表明默认是内到外进行事件传播</li><li>点击grandpa(即红色盒子)，只打印 granpa。</li></ul><p>JS中默认是在冒泡阶段以此触发事件的，这里也可以在addEventListener函数中传入第三个参数true（默认为false），这样事件就会在捕获阶段触发了。</p><h4 id="2-event对象"><a href="#2-event对象" class="headerlink" title="2.event对象"></a>2.event对象</h4><p>在上面的例子中，我们使用了this，其指向绑定事件的对象。但在JS中还有一个专门的对象event，当dom 树中某个事件被触发的时候，会同时自动event对象，它可以描述事件所有的相关信息（比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。）的对象。</p><p>这个event到底是个啥，我们可以先来输出看一看，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grandpa.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(event))</span><br></pre></td></tr></table></figure><p>之后我们会在控制台看到一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent">PointerEvent</a>对象（可从MDN中详细查看），里面包含了一大推各种各样的属性，只需记住常用的几个就行。</p><p>其中有两个属性target与currentTarget，我们先来看一看。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grandpa.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">id</span>,event.<span class="property">target</span>.<span class="property">id</span>))</span><br><span class="line">dad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">id</span>,event.<span class="property">target</span>.<span class="property">id</span>))</span><br><span class="line">son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>.<span class="property">id</span>,event.<span class="property">target</span>.<span class="property">id</span>))</span><br></pre></td></tr></table></figure><p>验一下吧，当我们点击son元素时，会依次打印</p><blockquote><p>son son</p><p>dad son</p><p>grandpa son</p></blockquote><p>也不卖关子了，<strong>event.currentTarget</strong>表示触发事件的对象，<strong>event.target</strong>表示最初触发事件的对象。了解了JS的事件机制后，我们知道，事件有一个冒泡阶段，当子元素的事件触发时，其祖先元素上的相同事件也会同时被触发。这样我们就能理解上面输出的含义了，我们点击的是son元素，尽管父元素也会跟着触发，但整个事件是由son元素最初触发引起的，因此target始终为son元素。</p><p>此外，我们也注意到，在最开始示例中的this与event.currentTarget都表示事件绑定的对象。但有一点需要注意，箭头函数是没有自身的this的，因此我们可以这么说，当使用普通函数而非箭头函数时，二者是等价的。</p><h4 id="二、事件委托"><a href="#二、事件委托" class="headerlink" title="二、事件委托"></a>二、事件委托</h4><p>事件委托就是把原本需要绑定在子元素上的事件委托给它的父元素，让父元素来监听子元素的冒泡事件，并在子元素发生事件冒泡时找到这个子元素。</p><h4 id="1-为什么用事件委托"><a href="#1-为什么用事件委托" class="headerlink" title="1.为什么用事件委托"></a>1.为什么用事件委托</h4><ul><li>节省监听数，也就是节省内存</li></ul><blockquote><p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率越大。</p></blockquote><p>假设，我们有一个列表，列表中有大量的列表项，我们需要在点击列表项的时候响应一个事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item n<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>方法一：</strong>利用循环，为ul下的所有的li都绑定一个click事件（这样太傻了，对内存消耗很大）</p><p><strong>方法二：</strong>利用事件冒泡，为li的父元素ul绑定一个click事件，然后在执行事件的时候再去匹配目标元素</p></blockquote><ul><li><p>可以动态绑定事件</p><p>想一想，很多时候，我们是需要从服务端获取数据并动态添加元素的，假设我们没有使用事件委托，为所有li单独绑定了事件，现在获取数据之后，新创建了li元素，那我们岂不是重写为新增的元素绑定事件。这样可太麻烦了。</p><p>以上面的html代码为例（省略样式），我们来看一下如何使用事件委托</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给父层元素绑定事件</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>).</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否匹配目标元素</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span>.<span class="title function_">toLocaleLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the content is: &#x27;</span>, e.<span class="property">target</span>.<span class="property">innerText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看上去是不是十分简洁</p></li></ul><p>我们来总结一下事件委托的基本方法，首先将事件绑定绑定给父元素，然后匹配目标元素。当时匹配的方法也就很多了，可以通过标签，类名，id等多种方式。</p><h4 id="2-小练习"><a href="#2-小练习" class="headerlink" title="2 小练习"></a>2 小练习</h4><p>在了解了JS 的事件委托后，我们来练习一下吧。要求：创建一个表格，用户可以添加并删除对应的行</p><p>html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">frame</span>=<span class="string">&#x27;hsides&#x27;</span> <span class="attr">rules</span>=<span class="string">&quot;rows&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;iptName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;iptAge&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入年龄&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加人员<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟获取到的数据</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;李梅&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> rows=[]</span><br><span class="line"><span class="keyword">let</span> tbody = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tbody&#x27;</span>);</span><br><span class="line"><span class="comment">// 初始化表格</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">creatList</span>(<span class="params"></span>) &#123;</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="function"><span class="params">per</span> =&gt;</span> &#123;</span><br><span class="line">rows.<span class="title function_">push</span>(<span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + per.<span class="property">name</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + per.<span class="property">age</span> + <span class="string">&#x27;&lt;td&gt;&lt;a class=&quot;del&quot; data-id=&#x27;</span>+per.<span class="property">id</span>+<span class="string">&#x27; href=&quot;javascript:;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">tbody.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterBegin&quot;</span>,rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮添加新值</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>)</span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> perName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iptName&#x27;</span>).<span class="property">value</span></span><br><span class="line"><span class="keyword">let</span> perAge = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iptAge&#x27;</span>).<span class="property">value</span></span><br><span class="line"><span class="keyword">let</span> perId = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="property">children</span>.<span class="property">length</span></span><br><span class="line"><span class="keyword">let</span> per = &#123;<span class="attr">id</span>:perId,<span class="attr">name</span>:perName,<span class="attr">age</span>:perAge&#125;</span><br><span class="line"><span class="keyword">if</span>(!perAge || !perName)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;不能为空值&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">insetHtml = <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + per.<span class="property">name</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + per.<span class="property">age</span> + <span class="string">&#x27;&lt;td&gt;&lt;a class=&quot;del&quot; data-id=&#x27;</span>+per.<span class="property">id</span>+<span class="string">&#x27; href=&quot;javascript:;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span><br><span class="line">tbody.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeEnd&quot;</span>,insetHtml)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某一值</span></span><br><span class="line">tbody.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">className</span>==<span class="string">&#x27;del&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tr = e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span></span><br><span class="line">    tr.<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python，兜兜转转，我又回来啦。</title>
      <link href="/2022/10/09/python/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
      <url>/2022/10/09/python/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>JS的事以后有机会再搞吧，近期由于学习的需要，于是重新搞起了python，简单地学习了一下Matplotlib库，还大概了解了一下爬虫和OpenCV库。先来简单聊聊Matplotlib库吧。</p><h3 id="一、快速上手Matplotlib库"><a href="#一、快速上手Matplotlib库" class="headerlink" title="一、快速上手Matplotlib库"></a>一、快速上手Matplotlib库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))  <span class="comment"># 定义窗口 num图片数量，figsize图片大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是绘制不同类型图像的函数</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">&quot;r&quot;</span>, linewidth=<span class="number">2</span>, linestyle=<span class="string">&quot;--&quot;</span>, label=<span class="string">&quot;  &quot;</span>)  <span class="comment"># 折线图 可以设置具体的值和线条的呈现 颜色</span></span><br><span class="line">plt.scatter(x, y, s=<span class="number">75</span>, alpha=<span class="number">0.5</span>, maker=<span class="string">&quot;o&quot;</span>)  <span class="comment"># 绘制散点图，maker默认为&#x27;o&#x27;，也可设置其他类型,比如星形。</span></span><br><span class="line">plt.bar([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>], )  <span class="comment"># 直方图</span></span><br><span class="line">plt.hist(<span class="built_in">list</span>, bins, histype=<span class="string">&quot;bar&quot;</span>, rwidth=<span class="number">0.8</span>, label=)  <span class="comment"># 条形图</span></span><br><span class="line"></span><br><span class="line">plt.xlim(-<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># </span></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 设置x,y轴的坐标范围</span></span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 展示</span></span><br></pre></td></tr></table></figure><p>基本的使用流程就是：引入包 —&gt;创建一个画板—&gt;使用对应绘图函数进行绘图—&gt;展示图像</p><p>当然，里面还可以设置很多属性的，比如设置图像的标题、xy轴的注记，也有一些进阶的技巧，比如绘制多个子图等等。这个就需要后续继续探索了</p><p>另外matplotlib库经常会和numpy库一起使用，numpy 是一个运行速度非常快的数学库，主要用于数组计算，绘图过程中不可避免地要传入图像的各种坐标数据，这时候用numpy就非常方便了，具体提供了怎样的便利，使用过程中就可以渐渐体会到了。</p><h3 id="二、绘制太阳系行星的运转图"><a href="#二、绘制太阳系行星的运转图" class="headerlink" title="二、绘制太阳系行星的运转图"></a>二、绘制太阳系行星的运转图</h3><h4 id="1、效果与源代码展示"><a href="#1、效果与源代码展示" class="headerlink" title="1、效果与源代码展示"></a>1、效果与源代码展示</h4><p><img src="https://s2.loli.net/2022/10/08/Jj2Q8R16ExzBLnf.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Planet</span>:</span><br><span class="line">    <span class="comment"># 参数分别为 初始坐标:x,y  ,颜色：c,面积大小s，轨道半径R，转速w</span></span><br><span class="line">    <span class="comment"># 同时将x作为轨道半径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, center=(<span class="params"><span class="number">0</span>, <span class="number">0</span></span>), s=<span class="number">10</span>, c=<span class="string">&#x27;b&#x27;</span>, R=<span class="number">1</span>, w=<span class="number">1</span></span>):</span><br><span class="line">        self.x = center[<span class="number">0</span>]</span><br><span class="line">        self.y = center[<span class="number">1</span>]</span><br><span class="line">        self.R = R</span><br><span class="line">        self.s = s</span><br><span class="line">        self.c = c</span><br><span class="line">        self.w = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_planet</span>(<span class="params">self</span>):</span><br><span class="line">        plt.scatter(self.x, self.y, self.s, self.c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_orbit</span>(<span class="params">self</span>):</span><br><span class="line">        draw_circle = plt.Circle((<span class="number">0</span>, <span class="number">0</span>), self.R, fill=<span class="literal">False</span>, alpha=<span class="number">0.2</span>, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        ax.add_artist(draw_circle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_location</span>(<span class="params">self, t</span>):</span><br><span class="line">        self.x = self.R * np.cos(<span class="number">2</span> * np.pi * self.w * t)</span><br><span class="line">        self.y = self.R * np.sin(<span class="number">2</span> * np.pi * self.w * t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_loc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x, self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 水 金 地 火 木 土 天王 海王 共八大行星</span></span><br><span class="line">Mercury = Planet((<span class="number">10</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#D9AA74&#x27;</span>, R=<span class="number">10</span>, w=<span class="number">60</span>)</span><br><span class="line">Venus = Planet((<span class="number">15</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#E4A66D&#x27;</span>, R=<span class="number">15</span>, w=<span class="number">30</span>)</span><br><span class="line">Earth = Planet((<span class="number">20</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#69D821&#x27;</span>, R=<span class="number">20</span>, w=<span class="number">20</span>)</span><br><span class="line">Mars = Planet((<span class="number">25</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#ED713D&#x27;</span>, R=<span class="number">25</span>, w=<span class="number">10</span>)</span><br><span class="line">Jupiter = Planet((<span class="number">30</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#C58347&#x27;</span>, R=<span class="number">30</span>, w=<span class="number">1.5</span>)</span><br><span class="line">Saturn = Planet((<span class="number">35</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#95633E&#x27;</span>, R=<span class="number">35</span>, w=<span class="number">0.6</span>)</span><br><span class="line">Uranus = Planet((<span class="number">40</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#3DBBF6&#x27;</span>, R=<span class="number">40</span>, w=<span class="number">0.2</span>)</span><br><span class="line">Neptune = Planet((<span class="number">45</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="string">&#x27;#0753A1&#x27;</span>, R=<span class="number">45</span>, w=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将八大行星放进列表中，可进行遍历，方便调用</span></span><br><span class="line">eight_planets = [Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">ax = fig.add_subplot(facecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.xlim(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">plt.ylim(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制星星</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    x = np.random.uniform(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    y = np.random.uniform(-<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    size = np.random.random(<span class="number">1</span>) / <span class="number">1.2</span></span><br><span class="line">    <span class="comment"># s指大小，c指颜色，marker指符号形状</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;wo&#x27;</span>, markersize=size)</span><br><span class="line"><span class="comment"># 绘制太阳</span></span><br><span class="line">sun = plt.scatter(<span class="number">0</span>, <span class="number">0</span>, s=<span class="number">1000</span>, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制八大行星</span></span><br><span class="line">scat = plt.scatter([x.get_loc()[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> eight_planets], [x.get_loc()[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> eight_planets],</span><br><span class="line">                   c=[x.get_color() <span class="keyword">for</span> x <span class="keyword">in</span> eight_planets])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eight_planets:</span><br><span class="line">    i.draw_orbit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随时间变化，设置新的行星位置坐标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">for</span> planet <span class="keyword">in</span> eight_planets:</span><br><span class="line">        planet.set_location(t)</span><br><span class="line">        scat.set_offsets([[x.get_loc()[<span class="number">0</span>], x.get_loc()[<span class="number">1</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> eight_planets])</span><br><span class="line">    <span class="keyword">return</span> scat,</span><br><span class="line"></span><br><span class="line">ani = FuncAnimation(fig, func=update, frames=np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2000</span>), interval=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于将图像保存为gif动图</span></span><br><span class="line"><span class="comment"># ani.save(&#x27;solar_system.gif&#x27;, writer=&#x27;pillow&#x27;, fps=60, dpi=100)</span></span><br></pre></td></tr></table></figure><h4 id="2、代码说明"><a href="#2、代码说明" class="headerlink" title="2、代码说明"></a>2、代码说明</h4><p>第一部分，我们创建了一个类，可以用来实例化各个行星，也方便后续操作。</p><p>第二部分，我们就可以利用Matplotlib库进行绘图了。</p><p>这里稍稍说一下scatter函数吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 省略引入库与创建画板</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">y=[<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">plt.scatter(x,y,c=<span class="string">&#x27;r&#x27;</span>,s=<span class="number">100</span>)  <span class="comment">#绘制两个面积为100的点（1,2）和（3,4）</span></span><br><span class="line">plt.scatter(<span class="number">1</span>,<span class="number">5</span>,c=<span class="string">&#x27;b&#x27;</span>,s=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在向scatter函数里面传入坐标时，可以传入一个值，也可以传入一个列表，传入列表的话就代表的是绘制多个点了。</p><p>接着再来谈一谈FuncAnimation函数的几个参数</p><ul><li><p><strong>fig</strong>：画布对象，由创建画布时的返回得到，即<code>fig = plt.figure()</code></p></li><li><p><strong>frames</strong>：指定动图的帧数，但这个参数类型必须是可迭代的列表等，可自行设置。每次调用func函数对图像进行更新时，接口将自动向func函数提供此时的帧数frame，这使得更新数据十分方便</p></li><li><p><strong>func</strong>：用于更新图片从而产生动态效果的调用函数，在编写时通常会用到set_data等类似的方法，其返回值是一个<strong>元素为被更新的图形对象的列表</strong>。同时，func可以接受帧数参数frame，用来更新每帧图像</p><p>简单地说就是可以给<strong>frames</strong>指定一个列表，动画函数会一直执行，次数与frames列表中元素个数相同，每次调用时，会将frames中的一个元素传递给<strong>func</strong>函数作为参数（第几次调用，就传递列表中第几个元素作为参数），然后利用这个参数就可以更新图像的点。</p></li><li><p><strong>interval</strong>：更新频率，单位是毫秒</p></li></ul><h3 id="三、丧尸病毒传播"><a href="#三、丧尸病毒传播" class="headerlink" title="三、丧尸病毒传播"></a>三、丧尸病毒传播</h3><p>说明：编写一个函数，初始条件有若干丧尸与健康人，丧尸会追逐最近的人，追上则感染对方。人会检测与之最近的丧尸，朝其反方向奔跑。且丧尸速度大于人的速度</p><h4 id="1、效果与源代码展示-1"><a href="#1、效果与源代码展示-1" class="headerlink" title="1、效果与源代码展示"></a>1、效果与源代码展示</h4><p><img src="https://s2.loli.net/2022/10/08/rHtnw4zejU1Ssfg.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> NearestNeighbors</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span>  <span class="comment"># 初始丧尸数量</span></span><br><span class="line">N = <span class="number">30</span>  <span class="comment"># 总人数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:  <span class="comment"># 点类，用来模拟人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = np.random.uniform(-<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.y = np.random.uniform(-<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.color = <span class="string">&#x27;g&#x27;</span></span><br><span class="line">        self.dire = <span class="number">0</span>  <span class="comment"># 方向</span></span><br><span class="line">        self.speed = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_loc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 这里返回的是一个元组</span></span><br><span class="line">        <span class="keyword">return</span> self.x, self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_color</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.color = color</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_speed</span>(<span class="params">self, speed</span>):</span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以猎人为视角的追逐算法,传入最近的对象，然后追逐。锁定两个目标</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chase</span>(<span class="params">self, person</span>):</span><br><span class="line">        <span class="comment"># 丧尸距离健康者的x,y距离</span></span><br><span class="line">        delta_x = self.x - person.get_loc()[<span class="number">0</span>]</span><br><span class="line">        delta_y = self.y - person.get_loc()[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 丧尸追逐</span></span><br><span class="line">        <span class="keyword">if</span> delta_y &gt; <span class="number">0</span>:</span><br><span class="line">            self.y -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_y &lt; <span class="number">0</span>:</span><br><span class="line">            self.y += self.speed</span><br><span class="line">        <span class="keyword">if</span> delta_x &gt; <span class="number">0</span>:</span><br><span class="line">            self.x -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_x &lt; <span class="number">0</span>:</span><br><span class="line">            self.x += self.speed</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 逃跑函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, zombie</span>):</span><br><span class="line">        <span class="comment"># 健康者距离丧尸的x,y距离</span></span><br><span class="line">        delta_x = self.x - zombie.get_loc()[<span class="number">0</span>]</span><br><span class="line">        delta_y = self.y - zombie.get_loc()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> delta_y &lt; <span class="number">0</span>:</span><br><span class="line">            self.y -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_y &gt; <span class="number">0</span>:</span><br><span class="line">            self.y += self.speed</span><br><span class="line">        <span class="keyword">if</span> delta_x &lt; <span class="number">0</span>:</span><br><span class="line">            self.x -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_x &gt; <span class="number">0</span>:</span><br><span class="line">            self.x += self.speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">border</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 边界判定，超出边界后，从另一边出来</span></span><br><span class="line">        <span class="keyword">if</span> self.x &gt; <span class="number">10</span>:</span><br><span class="line">            self.x = self.x - <span class="number">20</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.x &lt; -<span class="number">10</span>:</span><br><span class="line">            self.x = self.x + <span class="number">20</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.y &gt; <span class="number">10</span>:</span><br><span class="line">            self.y = self.y - <span class="number">20</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.y &lt; -<span class="number">10</span>:</span><br><span class="line">            self.y = self.y + <span class="number">20</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储所有对象（包括正常人与丧尸）</span></span><br><span class="line">people = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):  <span class="comment"># 人数</span></span><br><span class="line">    s = Person()</span><br><span class="line">    people.append(s)</span><br><span class="line"></span><br><span class="line">zombies = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.random.random(n):  <span class="comment"># 选出n个病人，改变颜色</span></span><br><span class="line">    people[<span class="built_in">int</span>(<span class="built_in">len</span>(people) * i)].set_color(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    zombies.append(people[<span class="built_in">int</span>(<span class="built_in">len</span>(people) * i)])</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">scat = plt.scatter([x.get_loc()[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> people], [x.get_loc()[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> people],</span><br><span class="line">                   c=[x.get_color() <span class="keyword">for</span> x <span class="keyword">in</span> people])</span><br><span class="line">plt.xlim(-<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">plt.ylim(-<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animate</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="comment"># 表示健康人群</span></span><br><span class="line">    g_people = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> people:</span><br><span class="line">        <span class="keyword">if</span> j.get_color() == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">            g_people.append(j)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 存储被感染的人群</span></span><br><span class="line">    l2 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">set</span>(g_people):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> g_people:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        j.set_speed(<span class="number">0.15</span>)</span><br><span class="line">        nnarray = NearestNeighbors(n_neighbors=<span class="number">1</span>).fit(np.array([x.get_loc() <span class="keyword">for</span> x <span class="keyword">in</span> zombies])).kneighbors(</span><br><span class="line">            np.array(j.get_loc()).reshape(<span class="number">1</span>, -<span class="number">1</span>), return_distance=<span class="literal">False</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># nn为最近丧尸在zoobies中的索引</span></span><br><span class="line">        nn = nnarray[<span class="number">0</span>]</span><br><span class="line">        j.run(people[nn])</span><br><span class="line">        j.border()  <span class="comment"># 边界检测</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 丧尸追逐，追逐最近的人类</span></span><br><span class="line">    <span class="keyword">for</span> zombie <span class="keyword">in</span> <span class="built_in">set</span>(zombies):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> g_people:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        zombie.set_speed(<span class="number">0.3</span>)</span><br><span class="line">        nnarray = NearestNeighbors(n_neighbors=<span class="number">1</span>).fit(np.array([x.get_loc() <span class="keyword">for</span> x <span class="keyword">in</span> g_people])).kneighbors(</span><br><span class="line">            np.array(zombie.get_loc()).reshape(<span class="number">1</span>, -<span class="number">1</span>), return_distance=<span class="literal">False</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># nn为最近正常人在g_people中的索引</span></span><br><span class="line">        nn = nnarray[<span class="number">0</span>]</span><br><span class="line">        zombie.chase(g_people[nn])</span><br><span class="line">        zombie.border()  <span class="comment"># 边界检测</span></span><br><span class="line">        <span class="comment"># 追上则感染</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(zombie.get_loc()[<span class="number">0</span>] - g_people[nn].get_loc()[<span class="number">0</span>]) &lt; <span class="number">0.4</span> <span class="keyword">and</span> <span class="built_in">abs</span>(</span><br><span class="line">                zombie.get_loc()[<span class="number">1</span>] - g_people[nn].get_loc()[<span class="number">1</span>]) &lt; <span class="number">0.4</span>:</span><br><span class="line">            g_people[nn].set_color(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            l2.append(g_people[nn])</span><br><span class="line">            <span class="keyword">del</span> g_people[nn] <span class="comment">#将被感染的人从健康人群中删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> l2:</span><br><span class="line">        zombies.append(j)</span><br><span class="line">    scat.set_offsets([[x.get_loc()[<span class="number">0</span>], x.get_loc()[<span class="number">1</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> people])</span><br><span class="line">    scat.set_color([x.get_color() <span class="keyword">for</span> x <span class="keyword">in</span> people])</span><br><span class="line">    <span class="keyword">return</span> scat,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">anim = animation.FuncAnimation(fig, animate, frames=<span class="number">100</span>, interval=<span class="number">100</span>, blit=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># anim.save(&#x27;丧尸.gif&#x27;, writer=&#x27;pillow&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、代码思路"><a href="#2、代码思路" class="headerlink" title="2、代码思路"></a>2、代码思路</h4><p>在有了matplotlib库的一些基础后，这个题目的难点基本就剩两个了，一、如何获取最近距离的点，二、如何实现追逐与逃跑的函数。</p><p>对于第一个问题，我们可以引入sklearn.neighbors，里面有方法可以帮助我们解决。</p><p>对于第二个问题，这里提供一个思路：追逐函数可以这样定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以猎人为视角的追逐算法,传入最近的对象，然后追逐。锁定两个目标</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chase</span>(<span class="params">self, person</span>):</span><br><span class="line">        <span class="comment"># 丧尸距离健康者的x,y距离</span></span><br><span class="line">        delta_x = self.x - person.get_loc()[<span class="number">0</span>]</span><br><span class="line">        delta_y = self.y - person.get_loc()[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 丧尸追逐</span></span><br><span class="line">        <span class="keyword">if</span> delta_y &gt; <span class="number">0</span>:</span><br><span class="line">            self.y -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_y &lt; <span class="number">0</span>:</span><br><span class="line">            self.y += self.speed</span><br><span class="line">        <span class="keyword">if</span> delta_x &gt; <span class="number">0</span>:</span><br><span class="line">            self.x -= self.speed</span><br><span class="line">        <span class="keyword">elif</span> delta_x &lt; <span class="number">0</span>:</span><br><span class="line">            self.x += self.speed</span><br></pre></td></tr></table></figure><p>既然是追逐，那肯定就要让两个点越来越近，以丧尸与人横坐标为例，二者之差大于零，说明丧尸偏右，那就让丧尸向左移，其他的就与之类似。实际上，逃跑函数和追逐函数也差不多。</p><h4 id="3、总结与改进"><a href="#3、总结与改进" class="headerlink" title="3、总结与改进"></a>3、总结与改进</h4><p>代码运行中，其实还有有一些问题的。比如，最后有可能会出现丧尸追不上人的情况，也挺鬼畜的，挺好玩的，哈哈。这是人合理利用了机制嘛，这是特性，绝对不是bug，当然也可以对追逐函数再进行补充，使其能够 ”跨边界追踪”。</p><p><img src="https://s2.loli.net/2022/10/08/p2hl9FXdKvrRWNG.gif"></p><p>另一个就是，有时候，某个人会突然不动，杵在原地，这个暂时还没有解决，期待大佬的解答。也欢迎大家提出其他优化建议啊。</p><h3 id="四、心得与总结"><a href="#四、心得与总结" class="headerlink" title="四、心得与总结"></a>四、心得与总结</h3><p>刚开始接触新东西，确实挺懵的，但凡是都要循序渐进嘛，而且精通一门技术是很难，但入门其实还是挺容易的。主要还是从题目出发，需要什么就去学习什么，初期也可以参考别人的代码，起初可能看不明白每一行的含义，但最后一定是要弄懂的，在这个过程中，可以在别人代码上进行增删修改，或者去看某个函数伙方法的具体含义、运转机制。在多次尝试以后，一定可以掌握入门技巧的。</p><p>以上就是最近学习成果中的一部分了，其实还简单地了解了一下爬虫和OpenCV部分，感觉还挺有意思的，不过目前刚刚算是入门中的入门，在这这里就不丢人了。主要还是任务驱动嘛，学习以及做项目的需要，所以最近学习的确实挺杂的。另外也确实有点迷茫，不知道该往哪个方向去钻研。走一步看一步吧，暂时缺失还没有想好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单聊聊js中的内置对象</title>
      <link href="/2022/08/31/JS%E7%AC%94%E8%AE%B0/1.5_%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/08/31/JS%E7%AC%94%E8%AE%B0/1.5_%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>javascript的三种对象类型：</p><p>1、<strong>内置对象</strong>，在浏览器中javascript中已经定义好的对象，可以直接拿来使用</p><p>2、<strong>宿主对象</strong>，就是执行JS脚本的环境提供的对象，所有的BOM和DOM都是宿主对象；</p><p>3、<strong>自定义对象</strong>，就是开发人员自己定义的对象。</p></blockquote><p>今天就来聊一聊JS中的内置对象。更详细的请查看MDN官方文档     <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference">内置对象</a></p><table><thead><tr><th align="left">常见内置对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">Array</td><td align="center">数组</td></tr><tr><td align="left">Boolean</td><td align="center">布尔对象</td></tr><tr><td align="left">Date</td><td align="center">日期对象</td></tr><tr><td align="left">Error</td><td align="center">异常对象</td></tr><tr><td align="left">Function</td><td align="center">函数构造器</td></tr><tr><td align="left">Math</td><td align="center">数学对象</td></tr><tr><td align="left">Number</td><td align="center">数值对象</td></tr><tr><td align="left">Object</td><td align="center">基础对象</td></tr><tr><td align="left">RegExp</td><td align="center">正则表达式对象</td></tr><tr><td align="left">String</td><td align="center">字符串对象</td></tr><tr><td align="left">Set</td><td align="center">集合对象</td></tr><tr><td align="left">Map</td><td align="center">创建映射</td></tr></tbody></table><h3 id="一、Map对象"><a href="#一、Map对象" class="headerlink" title="一、Map对象"></a>一、Map对象</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">MDN中的Map文档</a></p><blockquote><p>Map用来存储键值对结构的数据（key-value）</p></blockquote><p>Object中存储的数据就可以认为是一种键值对结构，二者的主要区别为：</p><blockquote><ul><li><p>Object中的属性名只能是字符串或符号，如果传递了一个其他类型的属性名，JS解释器会自动将其转换为字符串</p></li><li><p>Map中任何类型的值都可以称为数据的key</p></li></ul></blockquote><h4 id="1、常用属性和方法"><a href="#1、常用属性和方法" class="headerlink" title="1、常用属性和方法"></a>1、常用属性和方法</h4><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">new Map()</td><td align="left">创建新的 Map 对象。</td></tr><tr><td align="left">map.set( key,value )</td><td align="left">为 Map 对象中的键设置值。</td></tr><tr><td align="left">map.get(key)</td><td align="left">获取 Map 对象中键的值。</td></tr><tr><td align="left">map.entries()</td><td align="left">返回 Map 对象中键/值对的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators">迭代器对象</a></td></tr><tr><td align="left">map.keys()</td><td align="left">以数组形式返回所有key</td></tr><tr><td align="left">map.values()</td><td align="left">以数组形式返回所有value</td></tr><tr><td align="left">map.clear()</td><td align="left">删除所有键值对</td></tr><tr><td align="left">map.delete(key)</td><td align="left">删除指定数据</td></tr><tr><td align="left">map.has(key)</td><td align="left">检查map中是否包含指定键，返回布尔值。</td></tr></tbody></table><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>map.size</td><td>获取 Map 对象中某键的值。</td></tr></tbody></table><p>注：调用size属性的格式与其他方法不同，</p><h4 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="comment">//添加键值对</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">NaN</span>, <span class="string">&quot;啊哈&quot;</span>)</span><br><span class="line">map.<span class="title function_">delete</span>(<span class="title class_">NaN</span>)</span><br><span class="line"><span class="comment">// map.clear()   //清除所有内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>))  <span class="comment">// 张三</span></span><br><span class="line">fruits.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>);  <span class="comment">// 返回 undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map.entries()方法</span></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">myMap.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapIter = myMap.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapIter.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// [&quot;0&quot;, &quot;foo&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapIter.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// [1, &quot;bar&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapIter.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// [Object, &quot;baz&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="二、Set"><a href="#二、Set" class="headerlink" title="二、Set"></a>二、Set</h3><p>Set用来创建一个集合，它的功能和数组类似，不同点在于Set中不能存储重复的数据</p><h4 id="1、属性和方法"><a href="#1、属性和方法" class="headerlink" title="1、属性和方法"></a>1、属性和方法</h4><table><thead><tr><th>方法和属性</th><th>描述</th></tr></thead><tbody><tr><td>new Set()</td><td>创建新的 Set 对象。()中可传入数组作为参数</td></tr><tr><td>add()</td><td>向 Set 添加新元素。</td></tr><tr><td>clear()</td><td>从 Set 中删除所有元素。</td></tr><tr><td>delete()</td><td>删除由其值指定的元素。</td></tr><tr><td>entries()</td><td>返回 Set 对象中值的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators">迭代器对象</a>。</td></tr><tr><td>has()</td><td>如果值存在则返回 true。</td></tr><tr><td>forEach()</td><td>为每个元素调用回调。</td></tr><tr><td>keys()</td><td>返回 Set 对象中值的数组。</td></tr><tr><td>values()</td><td>与 keys() 相同。</td></tr><tr><td>size</td><td>返回元素计数。</td></tr></tbody></table><h4 id="2、示例-1"><a href="#2、示例-1" class="headerlink" title="2、示例"></a>2、示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Set</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="comment">//创建时，传入数组作为参数</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr2)</span><br><span class="line"><span class="comment">//向set中添加数据</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="三、Date对象"><a href="#三、Date对象" class="headerlink" title="三、Date对象"></a>三、Date对象</h3><p>Date 对象用于处理日期和时间，日期对象可用 new Date() 创建。</p><h4 id="1、创建Date对象"><a href="#1、创建Date对象" class="headerlink" title="1、创建Date对象"></a>1、创建Date对象</h4><h5 id="1-1、new-Date"><a href="#1-1、new-Date" class="headerlink" title="1.1、new Date() ;"></a>1.1、<em>new Date() ;</em></h5><p>依据系统设置的当前时间来创建一个Date对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(today); <span class="comment">//Wed Aug 31 2022 12:50:27 GMT+0800 (香港标准时间)</span></span><br></pre></td></tr></table></figure><h5 id="2-2、new-Date-value"><a href="#2-2、new-Date-value" class="headerlink" title="2.2、new Date(value)"></a>2.2、<em>new Date(value)</em></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> day = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1314520</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(day); <span class="comment">//Thu Jan 01 1970 08:21:54 GMT+0800 (香港标准时间)</span></span><br></pre></td></tr></table></figure><h5 id="2-3、new-Date-dateString"><a href="#2-3、new-Date-dateString" class="headerlink" title="2.3、new Date(dateString);"></a>2.3、<em>new Date(dateString);</em></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&quot;月/日/年 时:分:秒&quot;</span></span><br><span class="line">d = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2019-12-23T23:34:35&quot;</span>)</span><br><span class="line"><span class="comment">//年-月-日T时:分:秒</span></span><br><span class="line">t = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/23/2022 23:34:35&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-4、new-Date-年份-月-日-时-分-秒-毫秒"><a href="#2-4、new-Date-年份-月-日-时-分-秒-毫秒" class="headerlink" title="2.4、new Date(年份, 月, 日, 时, 分, 秒, 毫秒)"></a>2.4、new Date(年份, 月, 日, 时, 分, 秒, 毫秒)</h5><blockquote><ul><li>除年与月的值外，其余为可选值</li><li><strong>月份从0开始</strong>，0表示1月。day从1开始</li></ul></blockquote><h4 id="2、常用属性和方法"><a href="#2、常用属性和方法" class="headerlink" title="2、常用属性和方法"></a>2、常用属性和方法</h4><p>更多方法请看<a href="https://www.w3school.com.cn/jsref/jsref_obj_date.asp">W3C</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN</a></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取4位年份</td></tr><tr><td>getMonth()</td><td>返当前日期的月份（0-11）</td></tr><tr><td>getDate()</td><td>返回当前是几日(1,31)</td></tr><tr><td>getDay()</td><td>返回当前日期是周几（0-6） 0表示周日</td></tr><tr><td>…</td><td>类似的还有返回分钟、秒、毫秒（均从0开始）</td></tr><tr><td>getTime()</td><td>返回自 1970 年 1 月 1 日午夜以来与指定日期的毫秒数。</td></tr><tr><td>Date.now()</td><td>获取当前的时间戳</td></tr><tr><td>toLocaleString()</td><td>可以将一个日期转换为本地时间格式的字符串</td></tr></tbody></table><h4 id="3、日期的格式化"><a href="#3、日期的格式化" class="headerlink" title="3、日期的格式化"></a>3、日期的格式化</h4><p>object.**toLocaleString([locales [, options]])**，可以将一个日期转换为本地时间格式的字符串，可传入的参数如下：</p><ol><li>参数用于指定格式化对象时使用的语言环境，默认为当前环境的语言，可以不传(zh-CN 中文中国、 zh-HK 中文香港、en-US 英文美国等)</li><li>2.需要一个对象作为参数，在对象中可以通过对象的属性来对日期的格式进行配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> result = d.<span class="title function_">toLocaleString</span>(<span class="string">&quot;zh-CN&quot;</span>, &#123;</span><br><span class="line"><span class="attr">year</span>: <span class="string">&quot;numeric&quot;</span>,</span><br><span class="line">    <span class="attr">month</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">    <span class="attr">day</span>: <span class="string">&quot;2-digit&quot;</span>,</span><br><span class="line">    <span class="attr">weekday</span>: <span class="string">&quot;short&quot;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//2022年8月31日周三</span></span><br></pre></td></tr></table></figure><h3 id="四、String对象"><a href="#四、String对象" class="headerlink" title="四、String对象"></a>四、String对象</h3><p>JavaScript 的字符串是不可变的（immutable），String 类定义的方法都不能改变字符串的内容。像 String.toUpperCase() 这样的方法，返回的是全新的字符串，而不是修改原始字符串。</p><p>字符串其本质就是一个字符数组,很多方法和数组非常类似</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_bold.asp">bold()</a></td><td align="left">使用粗体显示字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_charAt.asp">charAt()</a></td><td align="left">返回在指定位置的字符。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_concat_string.asp">concat()</a></td><td align="left">连接字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_indexOf.asp">indexOf()</a></td><td align="left">检索字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_lastIndexOf.asp">lastIndexOf()</a></td><td align="left">从后向前搜索字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">replace()</a></td><td align="left">使用一个新字符串替换一个指定内容</td></tr><tr><td align="left">replaceAll()</td><td align="left">使用一个新字符串替换所有指定内容</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_search.asp">search()</a></td><td align="left">检索与正则表达式相匹配的值。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_slice_string.asp">slice()</a></td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_small.asp">small()</a></td><td align="left">使用小字号来显示字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_split.asp">split()</a></td><td align="left">把字符串分割为字符串数组。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_toLowerCase.asp">toLowerCase()</a></td><td align="left">把字符串转换为小写。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_toUpperCase.asp">toUpperCase()</a></td><td align="left">把字符串转换为大写。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_toString_string.asp">toString()</a></td><td align="left">返回字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_valueOf_string.asp">valueOf()</a></td><td align="left">返回某个字符串对象的原始值。</td></tr></tbody></table><h3 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h3><blockquote><p>正则表达式用来定义一个规则</p><ul><li>通过这个规则计算机可以检查一个字符串是否符合规则，或者将字符串中符合规则的内容提取出来</li><li>正则表达式也是JS中的一个对象，所以要使用正则表达式，需要先创建正则表达式的对象</li></ul></blockquote><p>更详细的内容可参考<a href="https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp">W3C</a>的文档以及<a href="https://www.runoob.com/regexp/regexp-flags.html">菜鸟教程文档</a></p><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><p><strong>创建 RegExp 对象的语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法： new RegExp(pattern, attributes);</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;i&quot;</span>)  <span class="comment">//可通过变量动态创建</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(p, <span class="string">&quot;i&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>直接量语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：/pattern/attributes</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>修饰符</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>ignore - 不区分大小写</td><td>将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td>g</td><td>global - 全局匹配</td><td>查找所有的匹配项。</td></tr><tr><td>m</td><td>multi line - 多行匹配</td><td>使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td>s</td><td>特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td>默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h4 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.在正则表达式中大部分字符都可以直接写</span></span><br><span class="line"><span class="comment">2.| 在正则表达式中表示或</span></span><br><span class="line"><span class="comment">3.[] 表示或（字符集）</span></span><br><span class="line"><span class="comment">[a-z] 任意的小写字母</span></span><br><span class="line"><span class="comment">[A-Z] 任意的大写字母</span></span><br><span class="line"><span class="comment">[a-zA-Z] 任意的字母</span></span><br><span class="line"><span class="comment">[0-9]任意数字</span></span><br><span class="line"><span class="comment">4.[^] 表示除了</span></span><br><span class="line"><span class="comment">[^x] 除了x</span></span><br><span class="line"><span class="comment">5. . 表示除了换行外的任意字符</span></span><br><span class="line"><span class="comment">6. 在正则表达式中使用\作为转义字符</span></span><br><span class="line"><span class="comment">7. 其他的字符集</span></span><br><span class="line"><span class="comment">\w 任意的单词字符 [A-Za-z0-9_]</span></span><br><span class="line"><span class="comment">\W 除了单词字符 [^A-Za-z0-9_]</span></span><br><span class="line"><span class="comment">\d 任意数字 [0-9]</span></span><br><span class="line"><span class="comment">\D 除了数字 [^0-9]</span></span><br><span class="line"><span class="comment">\s 空格</span></span><br><span class="line"><span class="comment">\S 除了空格</span></span><br><span class="line"><span class="comment">\b 单词边界</span></span><br><span class="line"><span class="comment">\B 除了单词边界</span></span><br><span class="line"><span class="comment">8. 开头和结尾</span></span><br><span class="line"><span class="comment">^ 表示字符串的开头</span></span><br><span class="line"><span class="comment">$ 表示字符串的结尾</span></span><br><span class="line"><span class="comment">9.量词</span></span><br><span class="line"><span class="comment">&#123;m&#125; 正好m个</span></span><br><span class="line"><span class="comment">    &#123;m,&#125; 至少m个</span></span><br><span class="line"><span class="comment">    &#123;m,n&#125; m-n个</span></span><br><span class="line"><span class="comment">    + 一个以上，相当于&#123;1,&#125;</span></span><br><span class="line"><span class="comment">    * 任意数量的a</span></span><br><span class="line"><span class="comment">    ? 0-1次 &#123;0,1&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>#####RegExp 对象方法</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_regexp_compile.asp">compile</a></td><td align="left">编译正则表达式。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_exec_regexp.asp">exec</a></td><td align="left">检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_test_regexp.asp">test</a></td><td align="left">检索字符串中指定的值。返回 true 或 false。</td></tr></tbody></table><h4 id="3、正则表达式示例"><a href="#3、正则表达式示例" class="headerlink" title="3、正则表达式示例"></a>3、正则表达式示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/abc|bad/</span>  <span class="comment">//abc或者bad</span></span><br><span class="line">re = <span class="regexp">/\./</span>            <span class="comment">//存在.</span></span><br><span class="line">re = <span class="regexp">/[a-z]/</span>         <span class="comment">//任意小写字母</span></span><br><span class="line">re = <span class="regexp">/a&#123;3&#125;/</span>          <span class="comment">//连续的3个a</span></span><br><span class="line">re = <span class="regexp">/^a&#123;3&#125;$/</span>        <span class="comment">//开头有三个或三个以上a</span></span><br><span class="line">re = <span class="regexp">/^(ab)&#123;3&#125;$/</span>      <span class="comment">//开头只有3个a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用exec()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcaecafcacc&quot;</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/a(([a-z])c)/ig</span>   <span class="comment">//不区分大小写的全局搜索，加括号可以进行分组，这样早exec()返回的数组中会包含多个值</span></span><br><span class="line"><span class="comment">//若为let re = /a[a-z]c/ig  第一次调用返回得到[abc]，而分组后会得到[&quot;abc&quot;,&quot;bc&quot;,&quot;b&quot;]</span></span><br><span class="line"><span class="keyword">let</span> result = re.<span class="title function_">exec</span>(str) <span class="comment">//调用一次只会返回一个值,返回的是一个对象，可通过索引得到符合的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">while</span>(result)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br><span class="line">result = re.<span class="title function_">exec</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：exec返回的是一个数组对象，除了里面包括返回的可匹配的值，还包括一些属性，比如在匹配对象的第一个字符在原来字符串中的索引，还包括原字符串。可分别通过index和input读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcaecafcacc&quot;</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/a(([a-z])c)/ig</span>   </span><br><span class="line"><span class="keyword">let</span> result = re.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>],result[<span class="number">1</span>],result[<span class="number">2</span>]) <span class="comment">//返回&quot;abc&quot;,&quot;bc&quot;,&quot;b&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">length</span>)<span class="comment">//返回3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">index</span>) <span class="comment">//返回0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">input</span>)<span class="comment">//返回原字符串，&quot;abcaecafcacc&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4、练习"><a href="#4、练习" class="headerlink" title="4、练习"></a>4、练习</h4><p><a href="https://c.runoob.com/front-end/854/">菜鸟教程的正则表达式测试工具</a></p><h5 id="4-1、找到手机号"><a href="#4-1、找到手机号" class="headerlink" title="4.1、找到手机号"></a>4.1、找到手机号</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到字符串中的手机号  （dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd）</span></span><br><span class="line"><span class="comment">//先找到规则：第一位要是1，第二位是3-9，然后是任意九个数字</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/1[3-9]\d&#123;9&#125;/g</span></span><br><span class="line"><span class="keyword">let</span> str =</span><br><span class="line">    <span class="string">&quot;dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd&quot;</span></span><br><span class="line"><span class="keyword">let</span> result</span><br><span class="line"><span class="keyword">while</span> (result = re.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2、隐藏部分号码"><a href="#4-2、隐藏部分号码" class="headerlink" title="4.2、隐藏部分号码"></a>4.2、隐藏部分号码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">re = <span class="regexp">/(1[3-9]\d)\d&#123;4&#125;(\d&#123;4&#125;)/g</span></span><br><span class="line"><span class="keyword">let</span> str =</span><br><span class="line">    <span class="string">&quot;dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd&quot;</span></span><br><span class="line"><span class="keyword">let</span> result</span><br><span class="line"><span class="keyword">while</span> (result = re.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]+<span class="string">&quot;****&quot;</span>+result[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3、判断是否是一个手机号"><a href="#4-3、判断是否是一个手机号" class="headerlink" title="4.3、判断是否是一个手机号"></a>4.3、判断是否是一个手机号</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>  <span class="comment">//开头和结尾都定义</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(<span class="string">&quot;13777788888&quot;</span>))<span class="comment">//test()会根据是否符合规则返回布尔值</span></span><br></pre></td></tr></table></figure><h4 id="5、字符串的正则表达式"><a href="#5、字符串的正则表达式" class="headerlink" title="5、字符串的正则表达式"></a>5、字符串的正则表达式</h4><p><strong>支持正则表达式的 String 对象的方法</strong></p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">search</td><td align="left">可以去搜索符合正则表达式的内容第一次在字符串中出现的位置，没有找到则返回-1</td></tr><tr><td align="left">match</td><td align="left">根据正则表达式去匹配字符串中符合要求的内容，返回一个数组</td></tr><tr><td align="left">matchAll</td><td align="left">根据正则表达式去匹配字符串中符合要求的内容(必须设置g 全局匹配)-,它返回的是一个迭代器</td></tr><tr><td align="left">replace</td><td align="left">根据正则表达式替换字符串中的指定内容</td></tr><tr><td align="left">split</td><td align="left">把字符串分割为字符串数组。</td></tr></tbody></table><h5 id="5-1、split"><a href="#5-1、split" class="headerlink" title="5.1、split()"></a>5.1、split()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;a@b@c@d&quot;</span></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">split</span>(<span class="string">&quot;@&quot;</span>) <span class="comment">//得到[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;孙悟空abc猪八戒adc沙和尚&quot;</span></span><br><span class="line">result = str.<span class="title function_">split</span>(<span class="regexp">/a[bd]c/</span>) <span class="comment">//得到[&#x27;孙悟空&#x27;,&#x27;猪八戒&#x27;,&#x27;沙和尚&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="5-2、search"><a href="#5-2、search" class="headerlink" title="5.2、search"></a>5.2、search</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;孙悟空abc猪八戒adc沙和尚&quot;</span></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">search</span>(<span class="string">&quot;abc&quot;</span>) <span class="comment">//返回3,</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd&quot;</span></span><br><span class="line">result = str.<span class="title function_">search</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/</span>)</span><br></pre></td></tr></table></figure><h5 id="2-3、replace"><a href="#2-3、replace" class="headerlink" title="2.3、replace()"></a>2.3、replace()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str =  <span class="string">&quot;dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd&quot;</span></span><br><span class="line"><span class="comment">//g表示全局搜索模式，可找到所有匹配的元素，不加g则只会找到一个就停止</span></span><br><span class="line">result = str.<span class="title function_">replace</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/g</span>, <span class="string">&quot;哈哈哈&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-4、match与matchAll"><a href="#2-4、match与matchAll" class="headerlink" title="2.4、match与matchAll()"></a>2.4、match与matchAll()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">letstr = <span class="string">&quot;dajsdh13715678903jasdlakdkjg13457890657djashdjka13811678908sdadadasd&quot;</span></span><br><span class="line">result = str.<span class="title function_">match</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/g</span>) <span class="comment">//返回[&#x27;13715678903&#x27;, &#x27;13457890657&#x27;, &#x27;13811678908&#x27;]</span></span><br><span class="line"></span><br><span class="line">result = str.<span class="title function_">matchAll</span>(<span class="regexp">/1[3-9](\d&#123;9&#125;)/g</span>) <span class="comment">//返回的是一个迭代器，可用for-of打印</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> result)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、JSON与对象的序列化"><a href="#六、JSON与对象的序列化" class="headerlink" title="六、JSON与对象的序列化"></a>六、JSON与对象的序列化</h3><p>在JS中对象的序列化通常是将一个对象转换为字符串（JSON字符串）</p><p><strong>序列化的好处</strong>：对象转换为字符串后，可以将字符串在不同的语言之间进行传递</p><p><strong>如何进行序列化：</strong></p><ul><li>在JS中有一个工具类 JSON （JavaScript Object Notation），JS对象序列化后会转换为一个字符串，这个字符串我们称其为JSON字符串</li><li>也可以手动的编写JSON字符串，在很多程序的配置文件就是使用JSON编写的</li><li>使用方括号保存数组，数组值使用 ,（逗号）分割。</li></ul><h4 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h4><ul><li>数据使用名/值对表示</li><li>使用大括号保存对象，每个名称后面跟着一个 ‘:’（冒号），名/值对使用 ,（逗号）分割。</li></ul><p><strong>注意事项：</strong></p><ol><li>基本语法：</li></ol><ul><li>数据使用名/值对表示</li></ul><ol><li><p>JSON字符串的属性名必须使用双引号引起来</p></li><li><p>JSON中可以使用的属性值（元素）</p><blockquote><p>数字（Number）、<strong>字符串（String） 必须使用双引号</strong>、布尔值（Boolean）、空值（Null）、对象（Object {} ）、数组（Array []）</p></blockquote></li><li><p>JSON的格式和JS对象的格式基本上一致的，</p><p><strong>注意：</strong>JSON字符串如果属性是最后一个，则不要再加,</p></li></ol><h4 id="2、相关函数"><a href="#2、相关函数" class="headerlink" title="2、相关函数"></a>2、相关函数</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">JSON.parse()</td><td align="left">用于将一个 JSON 字符串转换为 JavaScript 对象。</td></tr><tr><td align="left">JSON.stringify()</td><td align="left">用于将 JavaScript 值转换为 JSON 字符串。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)<span class="comment">//将一个对象转换为JSON字符串</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)<span class="comment">//将一个JSON格式的字符串转换为JS对象</span></span><br></pre></td></tr></table></figure><p>更详细的可学习JSON相关的教程，这里只做简单了解，后续会继续补充相关内容</p>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础（四）—— 数组、高阶函数、闭包等</title>
      <link href="/2022/08/29/JS%E7%AC%94%E8%AE%B0/1.4_%E6%95%B0%E7%BB%84/"/>
      <url>/2022/08/29/JS%E7%AC%94%E8%AE%B0/1.4_%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>说明：</p><h3 id="一、数组简介"><a href="#一、数组简介" class="headerlink" title="一、数组简介"></a>一、数组简介</h3><ul><li>数组也是一种复合数据类型，在数组可以存储多个不同类型的数据，数组中存储的是有序的数据，数组中的每个数据都有一个唯一的索引。</li><li>可以通过索引来操作获取数据</li><li> 数组中存储的数据叫做元素，索引（index）是一组大于等于0的整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组(可以通过Array()来创建数组，也可以通过[]来创建数组)</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()  </span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span> </span><br><span class="line"><span class="comment">//读取数组中的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>])</span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="number">33</span> <span class="comment">//向数组最后添加元素</span></span><br></pre></td></tr></table></figure><ul><li><p>length</p><blockquote><p>获取数组的长度，获取的实际值就是数组的最大索引 + 1</p><p>利用此，可以向数组最后添加元素：<br>数组[数组.length] = 元素</p><p>length是可以修改的</p></blockquote></li></ul><h3 id="二、遍历数组"><a href="#二、遍历数组" class="headerlink" title="二、遍历数组"></a>二、遍历数组</h3><p>遍历数组简单理解，就是获取到数组中的每一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王麻子&quot;</span>,<span class="string">&quot;店小二&quot;</span>]</span><br><span class="line"><span class="comment">//利用for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arrrr.<span class="property">length</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i].<span class="property">age</span> &lt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(personArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用for-of语句</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、数组的方法"><a href="#三、数组的方法" class="headerlink" title="三、数组的方法"></a>三、数组的方法</h3><h4 id="1、Array-isArray-参数"><a href="#1、Array-isArray-参数" class="headerlink" title="1、Array.isArray(参数)"></a>1、Array.isArray(参数)</h4><blockquote><p>检查一个对象是否是数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2、at-索引"><a href="#2、at-索引" class="headerlink" title="2、at(索引)"></a>2、at(索引)</h4><blockquote><ul><li>可以根据索引获取数组中的指定元素</li><li>at可以接收负索引作为参数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">at</span>(-<span class="number">1</span>) <span class="comment">//返回4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="3、concat"><a href="#3、concat" class="headerlink" title="3、concat()"></a>3、concat()</h4><blockquote><ul><li>用来连接两个或多个数组</li><li>非破坏性方法，不会影响原数组，而是返回一个新的数组</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.([<span class="number">4</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>])  <span class="comment">//可传入一个或以上参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//打印 [1,2,3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure><h4 id="4、indexOf-与-lastIndexOf"><a href="#4、indexOf-与-lastIndexOf" class="headerlink" title="4、indexOf() 与 lastIndexOf()"></a>4、indexOf() 与 lastIndexOf()</h4><p><strong>indexOf()</strong></p><blockquote><ul><li><p>获取元素在数组中第一次出现的索引</p></li><li><p>参数：</p><ol><li>要查询的元素</li><li>查询的起始位置</li></ol></li></ul></blockquote><p> <strong>lastIndexOf()</strong></p><blockquote><ul><li><p>获取元素在数组中最后一次出现的位置</p></li><li><p>参数：</p><ol><li>要查询的元素</li><li>查询的起始位置</li></ol></li><li><p>返回值：<br>   找到了则返回元素的索引，<br>​   没有找到返回-1</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>, <span class="string">&quot;唐僧&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">3</span>) <span class="comment">//返回3</span></span><br><span class="line">result = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">3</span>) <span class="comment">//返回3</span></span><br><span class="line">result = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;白骨精&quot;</span>)       <span class="comment">// 返回-1</span></span><br></pre></td></tr></table></figure><h4 id="5、join"><a href="#5、join" class="headerlink" title="5、join()"></a>5、join()</h4><blockquote><ul><li>将一个数组中的元素连接为一个字符串</li><li>参数：<br>​            指定一个字符串作为连接符,若不指定则默认用英文逗号连接</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">join</span>()  <span class="comment">//用英文逗号连接</span></span><br><span class="line">result = arr.<span class="title function_">join</span>(<span class="string">&quot;123&quot;</span>) <span class="comment">//用 123 连接 </span></span><br><span class="line">result = arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)  <span class="comment">//不使用连接符，即效果为，两个元素间没有连接符</span></span><br></pre></td></tr></table></figure><h4 id="6、slice"><a href="#6、slice" class="headerlink" title="6、slice()"></a>6、slice()</h4><blockquote><ul><li>用来截取数组（非破坏性方法）                       </li><li>参数：          <ol><li>截取的起始位置（包括该位置）</li><li>截取的结束位置（不包括该位置）   </li></ol></li><li>第二个参数可以省略不写，如果省略则会一直截取到最后</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">result = arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>)   <span class="comment">//[0,1]</span></span><br></pre></td></tr></table></figure><h4 id="7、push"><a href="#7、push" class="headerlink" title="7、push()"></a>7、push()</h4><blockquote><p>向数组的末尾添加一个或多个元素，并返回新的长度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">push</span>(<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="8、pop"><a href="#8、pop" class="headerlink" title="8、pop()"></a>8、pop()</h4><blockquote><p>删除并返回数组的最后一个元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">pop</span>()</span><br></pre></td></tr></table></figure><h4 id="9、unshift"><a href="#9、unshift" class="headerlink" title="9、unshift()"></a>9、unshift()</h4><blockquote><p>向数组的开头添加一个或多个元素，并返回新的长度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.[-<span class="number">1</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="10、shift"><a href="#10、shift" class="headerlink" title="10、shift()"></a>10、shift()</h4><blockquote><p>删除并返回数组的第一个元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">shift</span>()</span><br></pre></td></tr></table></figure><h4 id="11、reverse"><a href="#11、reverse" class="headerlink" title="11、reverse()"></a>11、reverse()</h4><blockquote><p>反转数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">reverse</span>()</span><br></pre></td></tr></table></figure><h4 id="12、splice"><a href="#12、splice" class="headerlink" title="12、splice()"></a>12、splice()</h4><blockquote><ul><li>可以删除、插入、替换数组中的元素</li><li>参数：<br>1、删除的起始位置<br>2、删除的数量<br>3、要插入的元素</li><li>返回值：<br> 返回被删除的元素</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">9</span>)<span class="comment">//表示从索引0开始删除两个元素，同时添加元素9</span></span><br></pre></td></tr></table></figure><p><strong>说明：后面的方法中需要用到一些回调函数的知识，可查看第六章进行了解</strong></p><h4 id="13、sort"><a href="#13、sort" class="headerlink" title="13、sort()"></a>13、sort()</h4><ul><li>sort用来对数组进行排序（会对改变原数组）</li><li>sort默认会将数组升序排列<br>​            注意：sort默认会按照Unicode编码进行排序，所以如果直接通过sort对数字进行排序<br>​              可能会得到一个不正确的结果</li><li>参数：<br>​             可以传递一个回调函数作为参数，通过回调函数来指定排序规则<br>​              (a, b) =&gt; a - b 升序排列<br>​              (a, b) =&gt; b - a 降序排列</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)   <span class="comment">//将原数组按升序排列</span></span><br></pre></td></tr></table></figure><h4 id="14、forEach"><a href="#14、forEach" class="headerlink" title="14、forEach()"></a>14、forEach()</h4><ul><li>用来遍历数组​ </li><li>它需要一个回调函数作为参数，这个回调函数会被调用多次<br>​            数组中有几个元素，回调函数就会调用几次<br>​            每次调用，都会将数组中的数据作为参数传递</li><li>回调函数中有三个参数：<br>​            element 当前的元素<br>​            index 当前元素的索引<br>​            array 被遍历的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>, <span class="string">&quot;唐僧&quot;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="15、fliter"><a href="#15、fliter" class="headerlink" title="15、fliter()"></a>15、fliter()</h4><ul><li>将数组中符合条件的元素保存到一个新数组中返回</li><li>需要一个回调函数作为参数，会为每一个元素去调用回调函数，并根据返回值来决定是否将元素添加到新数组中</li><li>非破坏性方法，不会影响原数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">// 获取数组中的所有偶数</span></span><br><span class="line"><span class="keyword">let</span> result1 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele % <span class="number">2</span> === <span class="number">1</span>)</span><br><span class="line"><span class="comment">//获取数组中大于5的数</span></span><br><span class="line"><span class="keyword">let</span> result2 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele &gt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="16、map"><a href="#16、map" class="headerlink" title="16、map()"></a>16、map()</h4><ul><li>根据当前数组生成一个新数组</li><li>需要一个回调函数作为参数，回调函数的返回值会成为新数组中的元素</li><li>非破坏性方法不会影响原数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">result = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele * <span class="number">2</span>)</span><br><span class="line"><span class="comment">//result就变成了 [2,4,6,8,10,12,14,18]</span></span><br></pre></td></tr></table></figure><h4 id="17、reduce"><a href="#17、reduce" class="headerlink" title="17、reduce()"></a>17、reduce()</h4><ul><li><p>可以用来将一个数组中的所有元素整合为一个值</p></li><li><p>参数：</p><ol><li><p>回调函数，通过回调函数来指定合并的规则</p></li><li><p>可选参数，初始值</p></li></ol></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  </span><br><span class="line">result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line"><span class="keyword">return</span> a + b      </span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">//结果：15</span></span><br><span class="line"> <span class="comment">//函数会调用多次</span></span><br><span class="line"> <span class="comment">/*   a   b</span></span><br><span class="line"><span class="comment"> 第一次：1,2</span></span><br><span class="line"><span class="comment"> 第二次：3,3      相当于把前一次次相加的结果返回给a</span></span><br><span class="line"><span class="comment"> ...   6,4</span></span><br><span class="line"><span class="comment">    10,5</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="四、深拷贝与浅拷贝"><a href="#四、深拷贝与浅拷贝" class="headerlink" title="四、深拷贝与浅拷贝"></a>四、深拷贝与浅拷贝</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p>如何去复制一个对象 复制必须要产生新的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;沙和尚&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = arr  <span class="comment">// 不是复制</span></span><br></pre></td></tr></table></figure><p>浅拷贝（shallow copy）</p><blockquote><ul><li>通常对对象的拷贝都是浅拷贝</li><li>浅拷贝顾名思义，只对对象的浅层进行复制（只复制一层）</li><li>如果对象中存储的数据是原始值，那么拷贝的深浅是不重要</li><li>浅拷贝只会对对象本身进行复制，不会复制对象中的属性（或元素）</li></ul></blockquote><p>深拷贝（deep copy）</p><blockquote><ul><li>深拷贝指不仅复制对象本身，还复制对象中的属性和元素 </li><li>因为性能问题，通常情况不太使用深拷贝</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>&#125;]</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>() <span class="comment">// 浅拷贝  当调用slice时，会产生一个新的数组对象，从而完成对数组的复制</span></span><br><span class="line"><span class="keyword">const</span> arr3 = <span class="title function_">structuredClone</span>(arr) <span class="comment">// 专门用来深拷贝的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br></pre></td></tr></table></figure><h4 id="2、展开运算符-…"><a href="#2、展开运算符-…" class="headerlink" title="2、展开运算符(…)"></a>2、展开运算符(…)</h4><blockquote><p>可以将一个数组中的元素展开到另一个数组中或者作为函数的参数传递</p><p>通过它也可以对数组进行浅复制</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;李四&quot;</span>，<span class="string">&quot;王麻子&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]  <span class="comment">//进行浅复制</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&quot;张三&quot;</span>, ...arr, <span class="string">&quot;李四&quot;</span>] <span class="comment">//也可添加其他元素或数组</span></span><br><span class="line"><span class="comment">//作为函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(...arr4)</span><br></pre></td></tr></table></figure><h4 id="3、对象的复制"><a href="#3、对象的复制" class="headerlink" title="3、对象的复制"></a>3、对象的复制</h4><ul><li><p><strong>Object.assign(目标对象, 被复制的对象)</strong></p><p> 将被复制对象中的属性复制到目标对象里，并将目标对象返回</p></li><li><p>也可以使用<strong>展开运算符</strong>对对象进行复制</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj)</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">address</span>: <span class="string">&quot;高老庄&quot;</span>, ...obj, <span class="attr">age</span>: <span class="number">48</span> &#125; <span class="comment">// 将obj中的属性在新对象中展开</span></span><br></pre></td></tr></table></figure><h3 id="五、练习：数组去重与排序"><a href="#五、练习：数组去重与排序" class="headerlink" title="五、练习：数组去重与排序"></a>五、练习：数组去重与排序</h3><h4 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h4><h5 id="1-1-最基本的方法"><a href="#1-1-最基本的方法" class="headerlink" title="1.1 最基本的方法"></a>1.1 最基本的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">// 分别获取数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 获取当前值后边的所有值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line"><span class="comment">// 判断两个数是否相等</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line"><span class="comment">// 出现了重复元素，删除后边的元素</span></span><br><span class="line">arr.<span class="title function_">splice</span>(j, <span class="number">1</span>)</span><br><span class="line"><span class="comment">/* 问题：</span></span><br><span class="line"><span class="comment">当arr[i] 和 arr[j]相同时，它会自动的删除j位置的元素，然后j+1位置的元素，会变成j位置的元素</span></span><br><span class="line"><span class="comment">而j位置已经比较过了，不会重复比较，所以会出现漏比较的情况</span></span><br><span class="line"><span class="comment"> 解决办法，当删除一个元素后，需要将该位置的元素在比较一遍*/</span></span><br><span class="line"> j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="1-2、方法二"><a href="#1-2、方法二" class="headerlink" title="1.2、方法二"></a>1.2、方法二</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组中的元素</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line"><span class="keyword">const</span> index = arr.<span class="title function_">indexOf</span>(arr[i], i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(index !== -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 出现重复内容</span></span><br><span class="line">arr.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="1-3、方法三"><a href="#1-3、方法三" class="headerlink" title="1.3、方法三"></a>1.3、方法三</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> ele <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="comment">//不存在ele元素,indexOF会返回-1</span></span><br><span class="line"><span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(ele) === -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//将元素添加到新数组中</span></span><br><span class="line">newArr.<span class="title function_">push</span>(ele)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure><h4 id="2、冒泡排序与选择排序"><a href="#2、冒泡排序与选择排序" class="headerlink" title="2、冒泡排序与选择排序"></a>2、冒泡排序与选择排序</h4><h5 id="2-1、冒泡排序"><a href="#2-1、冒泡排序" class="headerlink" title="2.1、冒泡排序"></a>2.1、冒泡排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// arr[i] 前边的元素 arr[i+1] 后边元素</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 大数在前，小数在后，需要交换两个元素的位置</span></span><br><span class="line"><span class="keyword">let</span> temp = arr[i] <span class="comment">// 临时变量用来存储arr[i]的值</span></span><br><span class="line">                arr[i] = arr[i + <span class="number">1</span>] <span class="comment">// 将arr[i+1]的值赋给arr[i]</span></span><br><span class="line">                arr[i + <span class="number">1</span>] = temp <span class="comment">// 修改arr[i+1]的值</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="2-2、选择排序"><a href="#2-2、选择排序" class="headerlink" title="2.2、选择排序"></a>2.2、选择排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line"> <span class="comment">// 交换两个元素的位置</span></span><br><span class="line"><span class="keyword">let</span> temp = arr[i]</span><br><span class="line">arr[i] = arr[j]</span><br><span class="line">                arr[j] = temp</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h3 id="六、回调函数与高阶函数"><a href="#六、回调函数与高阶函数" class="headerlink" title="六、回调函数与高阶函数"></a>六、回调函数与高阶函数</h3><blockquote><ul><li><p>回调函数：如果将函数作为参数传递，那么我们就称这个函数为回调函数</p></li><li><p>高阶函数：高阶函数是一个 <strong>接收函数作为参数或将函数作为输出返回</strong> 的函数</p></li></ul></blockquote><h4 id="1、情景"><a href="#1、情景" class="headerlink" title="1、情景"></a>1、情景</h4><p>创建一个函数对数组进行过滤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personArr =[</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">27</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王麻子&quot;</span>, <span class="number">8</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;店小二&quot;</span>, <span class="number">16</span>),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fliter</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].<span class="property">age</span> &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(arr[i]) <span class="comment">//向新数组中添加</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fliter</span>(personArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//即可得到一个过滤后的数组</span></span><br></pre></td></tr></table></figure><p>问题：</p><blockquote><ul><li><p>目前我们的函数只能过滤出数组中age属性小于18的对象，我们希望过滤更加灵活，在不同条件下进行过滤</p></li><li><p>这时候就需要学习一点新东西了</p><p>事实上，一个函数的参数也可以是函数，如果将函数作为参数传递，那么我们就称这个函数为回调函数（callback）</p></li><li><p>好处：将函数作为参数，意味着可以对另一个函数动态的传递代码</p></li></ul></blockquote><h4 id="2、优化（动态传递代码）"><a href="#2、优化（动态传递代码）" class="headerlink" title="2、优化（动态传递代码）"></a>2、优化（动态传递代码）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr, cb</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">cb</span>(arr[i])) &#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="title function_">filter</span>(personArr, <span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">name</span> === <span class="string">&quot;孙悟空&quot;</span>) <span class="comment">//会返回判断的结果（true或false）,然后if根据此决定是否执行</span></span><br><span class="line">result = <span class="title function_">filter</span>(personArr, <span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">age</span> &gt;= <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//温习一下箭头函数的知识</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 无参箭头函数：() =&gt; 返回值</span></span><br><span class="line"><span class="comment">一个参数的：a =&gt; 返回值</span></span><br><span class="line"><span class="comment">多个参数的：(a, b) =&gt; 返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只有一个语句的函数：() =&gt; 返回值</span></span><br><span class="line"><span class="comment">只返回一个对象的函数：() =&gt; (&#123;...&#125;)</span></span><br><span class="line"><span class="comment">有多行语句的函数：() =&gt; &#123;</span></span><br><span class="line"><span class="comment">                    ....    </span></span><br><span class="line"><span class="comment">                    return 返回值</span></span><br><span class="line"><span class="comment">            &#125; */</span></span><br></pre></td></tr></table></figure><h4 id="3-高阶函数练习"><a href="#3-高阶函数练习" class="headerlink" title="3 高阶函数练习"></a>3 高阶函数练习</h4><p><strong>练习</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  希望在someFn()函数执行时，可以记录一条日志</span></span><br><span class="line"><span class="comment">在不修改原函数的基础上，为其增加记录日志的功能</span></span><br><span class="line"><span class="comment">方法：可以通过高阶函数，来动态的生成一个新函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">someFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params">cb</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;记录日志~&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">cb</span>()</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">outer</span>(someFn)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>())  <span class="comment">//结果：记录日志~  hello</span></span><br></pre></td></tr></table></figure><h3 id="七、闭包"><a href="#七、闭包" class="headerlink" title="七、闭包"></a>七、闭包</h3><h4 id="1、情景-1"><a href="#1、情景-1" class="headerlink" title="1、情景"></a>1、情景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">创建一个函数，第一次调用时打印1，第二次调用打印2，以此类推 */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    num++</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li><p>问题：创建的变量num，我们不希望被别人访问到，否则容易被修改，出问题。这时我们就要了解一下闭包的概念了</p><blockquote><p> 闭包就是能访问到外部函数作用域中变量的函数</p></blockquote></li><li><p>什么时候使用：<br>​          当我们需要隐藏一些不希望被别人访问的内容时就可以使用闭包</p></li><li><p>构成闭包的要件：<br>1、函数的嵌套<br>2、内部函数要引用外部函数中的变量<br>3、内部函数要作为返回值返回</p></li></ul><h4 id="2、使用闭包"><a href="#2、使用闭包" class="headerlink" title="2、使用闭包"></a>2、使用闭包</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span> <span class="comment">// 位于函数作用域中</span></span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">num++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newFn = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">newFn</span>()  <span class="comment">//1</span></span><br><span class="line"><span class="title function_">newFn</span>()  <span class="comment">//2</span></span><br><span class="line"><span class="title function_">newFn</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="3、作用域问题"><a href="#3、作用域问题" class="headerlink" title="3、作用域问题"></a>3、作用域问题</h4><blockquote><ul><li><p>函数在作用域，在函数创建时就已经确定的（词法作用域），和调用的位置无关</p></li><li><p>闭包利用的就是词法作用域</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;全局变量中的a&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;fn2中的a&quot;</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>()  <span class="comment">//返回的是全局变量中的a</span></span><br></pre></td></tr></table></figure><h4 id="4、闭包的注意事项"><a href="#4、闭包的注意事项" class="headerlink" title="4、闭包的注意事项"></a>4、闭包的注意事项</h4><ul><li><strong>闭包的生命周期</strong>:</li></ul><blockquote><ol><li><p>闭包在外部函数调用时产生，外部函数每次调用都会产生<strong>一个全新的闭包</strong></p></li><li><p>在内部函数丢失时销毁（内部函数被垃圾回收了，闭包才会消失）</p></li></ol></blockquote><ul><li><strong>注意事项：</strong></li></ul><blockquote><p>1、闭包主要用来隐藏一些不希望被外部访问的内容， 这就意味着闭包需要占用一定的内存空间<br>2、相较于类来说，闭包比较浪费内存空间（类可以使用原型而闭包不能），</p><ul><li>需要执行次数较少时，使用闭包</li><li>需要大量创建实例时，使用类</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    num++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="title function_">outer2</span>() <span class="comment">// 独立闭包</span></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="title function_">outer2</span>() <span class="comment">// 独立闭包，二者互不影响</span></span><br><span class="line"><span class="title function_">fn1</span>()  <span class="comment">//打印结果：1</span></span><br><span class="line"><span class="title function_">fn2</span>()  <span class="comment">//打印结果：1</span></span><br><span class="line">fn1 = <span class="literal">null</span>    </span><br><span class="line">fn2 = <span class="literal">null</span><span class="comment">//内部函数丢失，闭包生命周期结束</span></span><br></pre></td></tr></table></figure><h3 id="八、递归"><a href="#八、递归" class="headerlink" title="八、递归"></a>八、递归</h3><p>递归的作用和循环是一致的，不同点在于，递归思路的比较清晰简洁，循环的执行性能比较好</p><p>在实际开发中，一般的问题都可以通过循环解决，尽量去使用循环，少用递归</p><p>只在一些使用循环解决比较麻烦的场景下，才使用递归</p><h4 id="1、如何编写递归函数"><a href="#1、如何编写递归函数" class="headerlink" title="1、如何编写递归函数"></a>1、如何编写递归函数</h4><p>把握两个条件： 1.基线条件 ——  递归的终止条件    2.递归条件 ——  如何对问题进行拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fact</span>(<span class="params">num</span>)&#123;</span><br><span class="line"><span class="comment">// 基线条件</span></span><br><span class="line">    <span class="keyword">if</span>(num === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 递归条件</span></span><br><span class="line">    <span class="comment">// num! = (num-1)! * num</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fact</span>(num-<span class="number">1</span>) * num</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="title function_">fact</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="2、递归练习之兔子数列"><a href="#2、递归练习之兔子数列" class="headerlink" title="2、递归练习之兔子数列"></a>2、递归练习之兔子数列</h4><p>兔子数列（斐波那契数列）</p><blockquote><p>一对兔子出生后两个月后每个月都能生一对小兔子<br>例子：1 1 2 3 5 8 13 21 34 …</p><p>题目：计算n个月后兔子数量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="comment">// 确定基线条件</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 设置递归条件</span></span><br><span class="line">    <span class="comment">// 第n个数 = 第n-1个数 + 第n-2个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fib</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="九、可变参数与arguments"><a href="#九、可变参数与arguments" class="headerlink" title="九、可变参数与arguments"></a>九、可变参数与arguments</h3><p>但有的时候我们并不能确定到底要传入多少数量的参数，这时可以利用可变参数，可以不受参数数量的限制，从而更加灵活地创建函数</p><h4 id="1、函数中隐含的参数——arguments"><a href="#1、函数中隐含的参数——arguments" class="headerlink" title="1、函数中隐含的参数——arguments"></a>1、函数中隐含的参数——arguments</h4><ul><li>arguments是函数中又一个隐含参数</li><li>arguments是一个类数组对象（伪数组）<br>​              和数组相似，可以通过索引来读取元素，也可以通过for循环变量，但是它不是一个数组对象，不能调用数组的方法</li><li>arguments用来存储函数的实参，<br>​              无论用户是否定义形参，实参都会存储到arguments对象中<br>​              另外也可以通过该对象直接访问实参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数可以求任意数量的数值的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 通过arguments，可以不受参数数量的限制更加灵活的创建函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">result += num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、使用可变参数"><a href="#2、使用可变参数" class="headerlink" title="2、使用可变参数"></a>2、使用可变参数</h4><ul><li><p>可变参数可以接收任意数量实参，并将他们统一存储到一个数组中返回</p></li><li><p>可变参数的作用和arguments基本是一致，但是也具有一些不同点：</p><pre><code>             1. 可变参数的名字可以自己指定             2. 可变参数就是一个数组，可以直接使用数组的方法             3. 可变参数可以配合其他参数一起使用       </code></pre></li><li><p>补充：… (展开运算符)</p><p>   ​          - 可以将一个数组中的元素展开到另一个数组中或者作为函数的参数传递</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">...abc</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(abc)   <span class="comment">//打印结果：[]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum2</span>(<span class="params">...num</span>) &#123;           <span class="comment">//以数组形式传入，这样就可以调用数组的方法</span></span><br><span class="line"><span class="keyword">return</span> num.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum2</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">//进行求和</span></span><br></pre></td></tr></table></figure><ul><li>普通参数与可变参数配合使用</li><li>注意：此时需要将可变参数写到最后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">a, b, ...args</span>) &#123;</span><br><span class="line"><span class="comment">// for (let v of arguments) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(v)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;1111&quot;</span>)   <span class="comment">//此时a=123,b=456,其他的会存到args数组中</span></span><br></pre></td></tr></table></figure><h3 id="十、改变函数的this对象"><a href="#十、改变函数的this对象" class="headerlink" title="十、改变函数的this对象"></a>十、改变函数的this对象</h3><p>复习函数的this</p><blockquote><ul><li><p>函数在执行时，JS解析器每次都会传递进一个隐含的参数<br>  这个参数就叫做 this，this会指向一个对象             </p></li><li><p>this所指向的对象会根据函数调用方式的不同而不同</p><p>   1.以函数形式调用时，this指向的是window</p><p>   2.以方法的形式调用时，this指向的是调用方法的对象</p><p>   3.构造函数中，this是新建的对象</p><p>   4.箭头函数没有自己的this，由外层作用域决定</p><p>   5.通过call和apply调用的函数，它们的第一个参数就是函数的this      </p></li><li><p>通过this可以在方法中引用调用方法的对象</p></li></ul></blockquote><p>箭头函数的this</p><blockquote><p>箭头函数没有自身的this，它的this由外层作用域决定，</p><p>也无法通过call apply 和 bind修改它的this </p><p>箭头函数中没有arguments</p></blockquote><h4 id="1、调用函数的方式"><a href="#1、调用函数的方式" class="headerlink" title="1、调用函数的方式"></a>1、调用函数的方式</h4><p>调用函数除了通过 函数() 这种形式外，还可以通过其他的方式来调用函数<br>比如，我们可以通过调用函数的call()和apply()来个方法来调用函数<br>            函数.call()   与   函数.apply()</p><ul><li>call 和 apply除了可以调用函数，还可以用来指定函数中的this</li><li>call和apply的第一个参数，将会成为函数的this</li><li>通过call方法调用函数，函数的实参直接在第一个参数后一个一个的列出来</li><li>通过apply方法调用函数，函数的实参需要通过一个数组传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数执行了~&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, fn &#125;</span><br><span class="line">fn.<span class="title function_">call</span>(obj)  <span class="comment">//指定this</span></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">console</span>)</span><br><span class="line"><span class="comment">//二者的不同点：通过apply方法调用函数，函数的实参需要通过一个数组传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn2.call(obj, &quot;hello&quot;, true)</span></span><br><span class="line">fn2.<span class="title function_">apply</span>(obj, [<span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>])</span><br></pre></td></tr></table></figure><h4 id="2、bind-方法"><a href="#2、bind-方法" class="headerlink" title="2、bind()方法"></a>2、bind()方法</h4><p>bind() 是函数的方法，可以用来创建一个新的函数</p><ul><li><p>bind可以为新函数绑定this</p></li><li><p>bind还可以为新函数绑定参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn执行了~~~~&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="title function_">bind</span>(obj, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="title function_">newFn</span>() <span class="comment">//调用新函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">fn执行了 &#123;name：&#x27;张三&#x27;&#125;</span></span><br><span class="line"><span class="comment">    10 20 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础（三）—— 面向对象编程</title>
      <link href="/2022/08/26/JS%E7%AC%94%E8%AE%B0/1.3_JavaScrip%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/08/26/JS%E7%AC%94%E8%AE%B0/1.3_JavaScrip%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h3><blockquote><p>对象是JS中的一种复合数据类型，它相当于一个容器，在对象中可以存储各种不同类型数据</p></blockquote><h4 id="1、创建对象"><a href="#1、创建对象" class="headerlink" title="1、创建对象"></a>1、创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Object()方法创建</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">//通过字面量法创建对象</span></span><br><span class="line"><span class="keyword">let</span> obj2 =&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、对象的属性"><a href="#2、对象的属性" class="headerlink" title="2、对象的属性"></a>2、对象的属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//续1.1</span></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>) <span class="comment">//打印 &quot;张三&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、遍历对象中的属性"><a href="#3、遍历对象中的属性" class="headerlink" title="3、遍历对象中的属性"></a>3、遍历对象中的属性</h3><p>通过for-in语句可以获取对象中的属性</p><p>注：并不是所有属性都可以被枚举</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//续1.1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(i, obj2[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、改变量与改变对象"><a href="#4、改变量与改变对象" class="headerlink" title="4、改变量与改变对象"></a>4、改变量与改变对象</h4><ul><li><p>修改对象时，如果有其他变量指向该对象则所有指向该对象的变量都会受到影响</p></li><li><p>修改变量修改变量时，只会影响当前的变量</p></li></ul><blockquote><p>   在使用变量存储对象时，很容易因为改变变量指向的对象，提高代码的复杂度。所以通常情况下，声明存储对象的变量时会使用const</p><p>   <strong>注意：</strong> const只是禁止变量被重新赋值，对对象的修改没有任何影响</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj</span><br><span class="line">obj2 = <span class="literal">null</span> <span class="comment">//此时obj不会改变</span></span><br><span class="line"><span class="comment">//修改对象</span></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span> <span class="comment">//此时obj也会跟着改变</span></span><br></pre></td></tr></table></figure><h4 id="5、方法"><a href="#5、方法" class="headerlink" title="5、方法"></a>5、方法</h4><blockquote><p>当一个对象的属性指向一个函数，那么我们就称这个函数是该对象的方法，调用函数就称为调用对象的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">sayHello = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="2、面向对象编程"><a href="#2、面向对象编程" class="headerlink" title="2、面向对象编程"></a>2、面向对象编程</h3><blockquote><p>一个事物抽象到程序中后就变成了对象，在程序的世界中，一切皆对象。面向对象的编程指，程序中的所有操作都是通过对象来完成。做任何事情之前都需要先找到它的对象，然后通过对象来完成各种操作。</p><p>三大特性：封装(安全性)、继承(扩展性)、多态(灵活性)</p></blockquote><p>​    一个事物通常由两部分组成：数据和功能<br>​    一个对象由两部分组成：属性和方法<br>​            事物的数据到了对象中，体现为属性；事物的功能到了对象中，体现为方法</p><h4 id="1、创建类"><a href="#1、创建类" class="headerlink" title="1、创建类"></a>1、创建类</h4><blockquote><p>类是对象模板，可以将对象中的属性和方法直接定义在类中定义后，就可以直接通过类来批量创建对象。</p><p>通过同一个类创建的对象，我们称为同类对象。可以使用instanceof来检查一个对象是否是由某个类创建如果某个对象是由某个类所创建，则我们称该对象是这个类的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Peoson</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用构造函数创建对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h4 id="2、构造函数"><a href="#2、构造函数" class="headerlink" title="2、构造函数"></a>2、构造函数</h4><blockquote><p>在类中可以添加一个特殊方法constructor，这个方法我们称为构造函数，它会在我们调用类创建对象时执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&quot;构造函数执行了~&quot;, name, age, gender)</span></span><br><span class="line"><span class="comment">// 可以在构造函数中，为实例属性进行赋值</span></span><br><span class="line"><span class="comment">// 在构造函数中，this表示当前所创建的对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a>3、封装</h4><ul><li><p>对象不仅存储属性，还要负责数据的安全，直接添加到对象中的属性并不安全，因为他们可以被随意修改。这时我们就要通过封装确保数据的安全，这样数据就只能在类内部使用</p></li><li><p>实现方式：1、属性私有化 前加#  2、通过getter和setter方法来操作属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">#name    <span class="comment">//首先我们哟啊声明一个私有属性</span></span><br><span class="line">#age</span><br><span class="line">#gender</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#name = name</span><br><span class="line">    <span class="variable language_">this</span>.#age = age</span><br><span class="line">    <span class="variable language_">this</span>.#gender = gender</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">// getter方法，用来读取属性</span></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#name</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//setter方法，用来设置属性</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name</span><br><span class="line">     &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>)</span><br><span class="line">p1.<span class="title function_">setName</span>(<span class="number">12</span>) <span class="comment">//设置</span></span><br><span class="line">p1.<span class="title function_">getName</span>()   <span class="comment">//读取</span></span><br></pre></td></tr></table></figure><h4 id="4、多态"><a href="#4、多态" class="headerlink" title="4、多态"></a>4、多态</h4><blockquote><p><strong>多态</strong>：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果</p></blockquote><h4 id="5、继承"><a href="#5、继承" class="headerlink" title="5、继承"></a>5、继承</h4><blockquote><p>可以通过extends关键来完成继承<br>​        - 当一个类继承另一个类时，就相当于将另一个类中的代码复制到了当前类中（简单理解）<br>​        - 继承发生时，被继承的类称为 父类（超类），继承的类称为 子类<br>​        - 通过继承可以减少重复的代码，并且可以在不修改一个类的前提对其进行扩展</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动物在叫~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;汤姆&quot;</span>)</span><br><span class="line">dog.<span class="title function_">sayHello</span>()    <span class="comment">//输出：动物在叫</span></span><br><span class="line">cat.<span class="title function_">sayHello</span>()  <span class="comment">//输出：动物在叫</span></span><br></pre></td></tr></table></figure><h4 id="6、原型对象"><a href="#6、原型对象" class="headerlink" title="6、原型对象"></a>6、原型对象</h4><blockquote><p>在JavaScript中，我们创建一个函数A(就是声明一个函数), 那么浏览器就会在内存中创建一个对象B，而且每个函数都默认会有一个属性 prototype 指向了这个对象( 即：prototype的属性的值是这个对象 )。这个对象B就是函数A的原型对象，简称函数的原型。这个原型对象B 默认会有一个属性 constructor 指向了这个函数A ( 意思就是说：constructor属性的值是函数A )。</p></blockquote><ul><li><p>会添加到原型对象中的情况：<br>​        1.在类中通过xxx(){}方式添加的方法，位于原型中<br>​        2.主动向原型中添加的属性或方法</p></li><li><p><strong>注意</strong>：原型对象也有原型，这样就构成了一条原型链，根据对象复杂程度不同，原型链的长度也不同</p></li><li><p><strong>原型链：</strong>读取对象属性时，会优先对象自身属性， 如果对象中有，则使用，没有则去对象的原型中寻找。如果原型中有，则使用，没有则去原型的原型中寻找，直到找到Object对象的原型（Object的原型没有原型（为null））。 如果依然没有找到，则返回undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,我是&quot;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//访问一个对象的原型对象   对象.__proto__  或 Object.getPrototypeOf(对象)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>原型链：</strong>读取对象属性时，会优先对象自身属性， 如果对象中有，则使用，没有则去对象的原型中寻找。如果原型中有，则使用，没有则去原型的原型中寻找，直到找到Object对象的原型（Object的原型没有原型（为null））。 如果依然没有找到，则返回undefined。<br>​           例： p对象的原型链：p对象 –&gt; 原型 –&gt; 原型 –&gt; nul   ； obj对象的原型链：obj对象 –&gt; 原型 –&gt; null</p><h5 id="6-1、原型对象的作用"><a href="#6-1、原型对象的作用" class="headerlink" title="6.1、原型对象的作用"></a>6.1、原型对象的作用</h5><blockquote><ul><li><p>原型就相当于是一个公共的区域，可以被所有该类实例访问，可以将该类实例中，所有的公共属性（方法）统一存储到原型中这样我们只需要创建一个属性，即可被所有实例访问</p></li><li><p>JS中继承就是通过原型来实现的,<br>当继承时，子类的原型就是一个父类的实例</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TomCat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Cat</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型链</span></span><br><span class="line"><span class="comment">// TomCat --&gt; cat --&gt; Animal实例 --&gt; object --&gt; Object原型 --&gt; null</span></span><br><span class="line"><span class="comment">// cat --&gt; Animal实例 --&gt; object --&gt; Object原型 --&gt; null</span></span><br></pre></td></tr></table></figure><h5 id="6-2、修改原型"><a href="#6-2、修改原型" class="headerlink" title="6.2、修改原型"></a>6.2、修改原型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> name = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">     age = <span class="number">18</span></span><br><span class="line">     <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello，我是&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;          </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fly</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在飞！&quot;</span>)</span><br><span class="line">&#125;     <span class="comment">//这段代码将为构造函数的 prototype 属性添加一个新的方法：</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="title function_">fly</span>()</span><br><span class="line">p2.<span class="title function_">fly</span>()</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">大部分情况下，我们是不需要修改原型对象</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">千万不要通过类的实例去修改原型</span></span><br><span class="line"><span class="comment">1. 通过一个对象影响所有同类对象，这么做不合适</span></span><br><span class="line"><span class="comment">2. 修改原型先得创建实例，麻烦</span></span><br><span class="line"><span class="comment">3. 危险</span></span><br><span class="line"><span class="comment">除了通过__proto__能访问对象的原型外，还可以通过类的prototype属性，来访问实例的原型</span></span><br><span class="line"><span class="comment">修改原型时，最好通过通过类去修改</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1. 一修改就是修改所有实例的原型</span></span><br><span class="line"><span class="comment">2. 无需创建实例即可完成对类的修改</span></span><br><span class="line"><span class="comment">原则：</span></span><br><span class="line"><span class="comment">1. 原型尽量不要手动改</span></span><br><span class="line"><span class="comment">2. 要改也不要通过实例对象去改</span></span><br><span class="line"><span class="comment">3. 通过 类.prototype 属性去修改</span></span><br><span class="line"><span class="comment">4. 最好不要直接给prototype去赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础(二) —— 基本函数的使用</title>
      <link href="/2022/08/25/JS%E7%AC%94%E8%AE%B0/1.2_%E5%87%BD%E6%95%B0/"/>
      <url>/2022/08/25/JS%E7%AC%94%E8%AE%B0/1.2_%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、函数的创建"><a href="#一、函数的创建" class="headerlink" title="一、函数的创建"></a>一、函数的创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">函数的定义方式：</span><br><span class="line"><span class="number">1.</span>函数声明</span><br><span class="line"> <span class="keyword">function</span> 函数名([参数])&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>函数表达式</span><br><span class="line"><span class="keyword">const</span> 变量 = <span class="keyword">function</span>(<span class="params">[参数]</span>)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>箭头函数  <span class="comment">//当箭头函数只有一个参数时，可以省略括号</span></span><br><span class="line">([参数]) =&gt; &#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、函数的参数"><a href="#二、函数的参数" class="headerlink" title="二、函数的参数"></a>二、函数的参数</h3><blockquote><ul><li>形式参数<br>在定义函数时，可以在函数中指定数量不等的形式参数（形参）<br>在函数中定义形参，就相当于在函数内部声明了对应的变量但是没有赋值</li><li>实际参数<br>在调用函数时，可以在函数的()传递数量不等的实参<br>实参会赋值给其对应的形参</li><li>参数：<br>1.如果实参和形参数量相同，则对应的实参赋值给对应的形参<br>2.如果实参多余形参，则多余的实参不会使用<br>3.如果形参多余实参，则多余的形参为undefined</li><li>参数的类型：JS中不会检查参数的类型，可以传递任何类型的值作为参数</li></ul></blockquote><h4 id="1、对象作为参数"><a href="#1、对象作为参数" class="headerlink" title="1、对象作为参数"></a>1、对象作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span><br><span class="line">     a.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>&#125;</span><br><span class="line"><span class="title function_">fn</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="2、函数作为参数"><a href="#2、函数作为参数" class="headerlink" title="2、函数作为参数"></a>2、函数作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是fn2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(fn2)</span><br></pre></td></tr></table></figure><h3 id="三、函数的返回值"><a href="#三、函数的返回值" class="headerlink" title="三、函数的返回值"></a>三、函数的返回值</h3><blockquote><ul><li>在函数中，可以通过return关键字来指定函数的返回值<br>​         返回值就是函数的执行结果，函数调用完毕返回值便会作为结果返回</li><li>任何值都可以作为返回值使用（包括对象和函数之类）<br>​         如果return后不跟任何值，则相当于返回undefined<br>​         如果不写return，那么函数的返回值依然是undefined</li><li>return一执行函数立即结束，后面的语句不再执行</li></ul></blockquote><p><strong>补充</strong>：箭头函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//箭头函数的返回值可以直接写在箭头后</span></span><br><span class="line"> <span class="comment">//如果直接在箭头后设置对象字面量为返回值时，对象字面量必须使用()括起来</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; (&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line">result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h3><blockquote><p>作用域指的是一个变量的可见区域，包括全局作用域与局部作用域</p><ul><li>全局作用域<br>全局作用域在网页运行时创建，在网页关闭时消耗<br>所有直接编写到script标签中的代码都位于全局作用域中<br>全局作用域中的变量是全局变量，可以在任意位置访问</li><li>局部作用域<br>块作用域就是一种局部作用域，在代码块执行时创建，代码块执行完毕它就销毁<br>在块作用域中声明的变量是局部变量，只能在块内部访问，外部无法访问</li></ul></blockquote><h4 id="1、函数作用域"><a href="#1、函数作用域" class="headerlink" title="1、函数作用域"></a>1、函数作用域</h4><blockquote><p>函数作用域也是一种局部作用域。函数作用域在函数调用时产生，调用结束后销毁<br>函数每次调用都会产生一个全新的函数作用域。在函数中定义的变量是局部变量，只能在函数内部访问，外部无法访问</p></blockquote><h4 id="2、函数作用域链"><a href="#2、函数作用域链" class="headerlink" title="2、函数作用域链"></a>2、函数作用域链</h4><blockquote><p>   - 当我们使用一个变量时，<br>​           JS解释器会优先在当前作用域中寻找变量，<br>​            如果找到了则直接使用。如果没找到，则去上一层作用域中寻找，找到了则使用<br>​            如果还没找到，则继续去上一层寻找，以此类推<br>​            如果一直到全局作用域都没找到，则报错 xxx is not defined</p></blockquote><h3 id="五、立即执行函数"><a href="#五、立即执行函数" class="headerlink" title="五、立即执行函数"></a>五、立即执行函数</h3><blockquote><p>   - 立即执行函数是一个匿名的函数，并它只会调用一次<br>​   - 可以利用IIFE来创建一个一次性的函数作用域，避免变量冲突的问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="六、window对象"><a href="#六、window对象" class="headerlink" title="六、window对象"></a>六、window对象</h3><blockquote><p>在浏览器中，浏览器为我们提供了一个window对象，可以直接访问</p><p>window对象代表的是浏览器窗口，通过该对象可以对浏览器窗口进行各种操作<br>除此之外window对象还负责存储JS中的内置对象和浏览器的宿主对象</p><p>window对象的属性可以通过window对象访问，也可以直接访问</p><p>函数就可以认为是window对象的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">10</span> <span class="comment">//向window对象中添加的属性会自动变成全局变量</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   var 用来声明变量，作用和let相同，但是var不具有块作用域</span></span><br><span class="line"><span class="comment">        - 在全局中使用var声明的变量，都会作为window对象的属性保存</span></span><br><span class="line"><span class="comment">        - 使用function声明的函数，都会作为window的方法保存</span></span><br><span class="line"><span class="comment">        - 使用let声明的变量不会存储在window对象中，而存在一个秘密的小地方（无法访问）</span></span><br><span class="line"><span class="comment">        - var虽然没有块作用域，但有函数作用域</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="七、this"><a href="#七、this" class="headerlink" title="七、this"></a>七、this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*this</span></span><br><span class="line"><span class="comment"> - 函数在执行时，JS解析器每次都会传递进一个隐含的参数</span></span><br><span class="line"><span class="comment">     - 这个参数就叫做 this</span></span><br><span class="line"><span class="comment">     - this会指向一个对象</span></span><br><span class="line"><span class="comment">     - this所指向的对象会根据函数调用方式的不同而不同</span></span><br><span class="line"><span class="comment">         1.以函数形式调用时，this指向的是window</span></span><br><span class="line"><span class="comment">            2.以方法的形式调用时，this指向的是调用方法的对象</span></span><br><span class="line"><span class="comment">              ...</span></span><br><span class="line"><span class="comment"> - 通过this可以在方法中引用调用方法的对象 */</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)  </span><br><span class="line">     &#125;,</span><br><span class="line">&#125; </span><br><span class="line">obj.<span class="title function_">sayHello</span>() <span class="comment">//调用时，this就是obj</span></span><br></pre></td></tr></table></figure><h3 id="八、箭头函数补充"><a href="#八、箭头函数补充" class="headerlink" title="八、箭头函数补充"></a>八、箭头函数补充</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、无参箭头函数：() =&gt; 返回值</span><br><span class="line"><span class="number">2</span>、一个参数的：a =&gt; 返回值</span><br><span class="line"><span class="number">3</span>、多个参数的：(a, b) =&gt; 返回值</span><br><span class="line"><span class="number">4</span>、只有一个语句的函数：() =&gt; 返回值</span><br><span class="line"><span class="number">5</span>、只返回一个对象的函数：() =&gt; (&#123;...&#125;)</span><br><span class="line"><span class="number">6</span>、有多行语句的函数：() =&gt; &#123;</span><br><span class="line">                    ....    </span><br><span class="line">                    <span class="keyword">return</span> 返回值</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础（一）—— 基础知识</title>
      <link href="/2022/08/22/JS%E7%AC%94%E8%AE%B0/1.1_JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/22/JS%E7%AC%94%E8%AE%B0/1.1_JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JS简介"><a href="#一、JS简介" class="headerlink" title="一、JS简介"></a>一、JS简介</h3><p>JavaScript是目前web开发中不可缺少的脚本语言，前端三件套之一。JS可以直接运行在浏览器端，增加网页的动态交互功能。测试版本叫LiveScript，但发布正式版时又被重命名为JavaScript。为什么命名为JavaScript呢？因为Java当时比较火，可以说是为了蹭一下Java的热度。 </p><blockquote><p>ECMAScript为我们定义最基本的语法，像是数据类型（原始值、对象）、运算符、流程控制语句等内容。为了使JS可以适用于不同的场景，在不同的JS解释器中还为我们提供了不同的扩展以增强其功能。像是浏览器中的DOM、BOM使得我们可以通过JS操作网页和浏览器。NodeJS中的fs模块可以使我们直接操作计算机系统中的各种文件。所以我们学习JS时，除了要学习ES标准以外，还要学习它的各种扩展，才能在不同的环境中发挥出JS的最大威力</p></blockquote><h3 id="二、第一个js程序"><a href="#二、第一个js程序" class="headerlink" title="二、第一个js程序"></a>二、第一个js程序</h3><p>学习一门编程语言，第一步当然就是 hello world 啦，问就是，一定要有仪式感，尊重传统</p><p>可以在html模板中的head标签写入下列代码，再用浏览器打开，即可运行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;Hello world&quot;</span>)<span class="comment">//弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world&quot;</span>)  <span class="comment">//在控制台打印 ,按下F12进入开发者模式即可查看</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello world&quot;</span>)<span class="comment">//写入到网页中</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、JS书写位置"><a href="#三、JS书写位置" class="headerlink" title="三、JS书写位置"></a>三、JS书写位置</h3><h4 id="1-内嵌式"><a href="#1-内嵌式" class="headerlink" title="1.内嵌式"></a>1.内嵌式</h4><p>可以在html模板中的head标签中书写script标签，然后将js书此script标签中,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>在这里书写语句吧<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-外链式"><a href="#2-外链式" class="headerlink" title="2.外链式"></a>2.外链式</h4><p>新建一个后缀名为.js的文件，然后在该文件中书写语句，再通过script标签引入到html网页中</p><script src="js文件路径地址">请不要在这里书写js语句</script><h4 id="3-行内式"><a href="#3-行内式" class="headerlink" title="3.行内式"></a>3.行内式</h4><p>也可以直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你点我干嘛&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、JS中的一些基础语法"><a href="#四、JS中的一些基础语法" class="headerlink" title="四、JS中的一些基础语法"></a>四、JS中的一些基础语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 注释：多行注释  <span class="comment">/**/</span>  </span><br><span class="line"> 单行注释  <span class="comment">//   </span></span><br><span class="line"><span class="number">3</span>、js严格区分大小写        </span><br><span class="line"><span class="number">4</span>、js中每一条代码都应该以分号结尾，如果没有写，解释器会自动进行添加。不过某些特殊情况下，会添加错误。</span><br></pre></td></tr></table></figure><h3 id="五、变量和常量"><a href="#五、变量和常量" class="headerlink" title="五、变量和常量"></a>五、变量和常量</h3><p>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型。</p><h4 id="1、声明"><a href="#1、声明" class="headerlink" title="1、声明"></a>1、声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var与let都是声明变量，最好不要使用var</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;我是一个字符串&#x27;</span> </span><br><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">20</span>   </span><br></pre></td></tr></table></figure><h4 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h4><ul><li>用let，而不要使用var（var本身存在很多问题，记得用 let 就完了）</li><li>变量并不存储任何值，而是存储值的内存地址</li></ul><h3 id="六、数据类型与类型检查"><a href="#六、数据类型与类型检查" class="headerlink" title="六、数据类型与类型检查"></a>六、数据类型与类型检查</h3><h4 id="1、基本类型"><a href="#1、基本类型" class="headerlink" title="1、基本类型"></a>1、基本类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数值型(<span class="title class_">Number</span>):  <span class="comment">//存储很大或很小的数时无法准确显示</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>     <span class="comment">//NaN也是一个特殊的数值,表示非法的数值</span></span><br><span class="line"><span class="number">2.</span>大整数(<span class="title class_">BigInt</span>):  <span class="comment">//以n结尾，可表示的数字范围是无穷大</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9999999999999999n</span></span><br><span class="line"><span class="number">3.</span>字符串(<span class="title class_">String</span>): <span class="comment">//使用单引号或双引号</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;我是字符串&quot;</span></span><br><span class="line"><span class="number">4.</span>布尔(<span class="title class_">Boolean</span>):  </span><br><span class="line"><span class="keyword">let</span> i = <span class="literal">true</span></span><br><span class="line"><span class="number">5.</span>空值(<span class="title class_">Null</span>):</span><br><span class="line"><span class="keyword">let</span> j = <span class="literal">null</span></span><br><span class="line"><span class="number">6.</span>未定义(<span class="title class_">Undefined</span>)<span class="comment">//当声明一个变量而没有赋值时，它的值就是Undefined</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="number">7.</span>符号(<span class="title class_">Symbol</span>)<span class="comment">//用来创建一个唯一的标识 </span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title class_">Symbol</span>(<span class="string">&quot;我是一个符号&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2、typeof类型检查"><a href="#2、typeof类型检查" class="headerlink" title="2、typeof类型检查"></a>2、typeof类型检查</h4><table><thead><tr><th align="center">a定义的值(let a =)</th><th align="center">typeof a的返回值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">number</td></tr><tr><td align="center">9999999999999999n</td><td align="center">bigint</td></tr><tr><td align="center">true</td><td align="center">boolean</td></tr><tr><td align="center">null</td><td align="center">object</td></tr><tr><td align="center">不进行定义</td><td align="center">undefined</td></tr><tr><td align="center">Symbol(“创建符号”)</td><td align="center">symbol</td></tr></tbody></table><p>注：由于js历史遗留问题，编辑器会将null作为object类型处</p><h3 id="七、类型转换"><a href="#七、类型转换" class="headerlink" title="七、类型转换"></a>七、类型转换</h3><h4 id="1、显式转换"><a href="#1、显式转换" class="headerlink" title="1、显式转换"></a>1、显式转换</h4><p>显示转换一般指使用<strong>Number</strong>、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。还有专门将字符串转换为数值的方法，如parseInt、parseFloat等</p><ul><li><strong>Number函数：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>String函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Boolean函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>parseInt与parseFloat函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;3.1415&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">parseInt</span>(a)   <span class="comment">//b = 3</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">parseFloat</span>(c) <span class="comment">//c = 3.1415</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2、简单聊聊隐式转换"><a href="#2、简单聊聊隐式转换" class="headerlink" title="2、简单聊聊隐式转换"></a>2、简单聊聊隐式转换</h4><blockquote><p>#####隐式类型转换是在一定场景下，js 运行环境自动调用ToString、ToNumber、ToBoolean、ToPrimitive这几个方法，尝试转换成期望的数据类型。</p></blockquote><table><thead><tr><th>转化类型</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>转换成 String</td><td>+ ‘任意字符串’</td><td>任意值与字符串相加，会先将其他值转换为字符串，然后拼接</td></tr><tr><td>转换成 Number</td><td>(自增自减运算符)  (减、乘、除) (关系运算符)</td><td>转换为 Number 再进行运算</td></tr><tr><td>转换为Boolean</td><td>! (逻辑非运算符)</td><td>自动转换为Boolean</td></tr></tbody></table><p><strong>任意值与字符串相加的例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> + <span class="string">&#x27;5&#x27;</span> <span class="comment">// &quot;10&quot; + &quot;5&quot;  会返回&quot;105&quot;</span></span><br></pre></td></tr></table></figure><p>其他的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> - <span class="string">&#x27;5&#x27;</span> <span class="comment">// 10 - 5</span></span><br><span class="line">a = <span class="string">&quot;5&quot;</span> % <span class="number">2</span>   <span class="comment">// 5 % 2</span></span><br><span class="line">a = <span class="number">10</span> + <span class="literal">true</span> <span class="comment">// 10 + 1</span></span><br><span class="line">a = <span class="number">5</span> + <span class="literal">null</span> <span class="comment">// 5 + 0</span></span><br><span class="line">a = <span class="number">6</span> - <span class="literal">undefined</span> <span class="comment">// 6 - NaN</span></span><br></pre></td></tr></table></figure><h3 id="八、运算符"><a href="#八、运算符" class="headerlink" title="八、运算符"></a>八、运算符</h3><h4 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * /  ++  --  %</span><br><span class="line">加减乘除 自加 自减 取模</span><br></pre></td></tr></table></figure><h4 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">例子</th><th align="center">等同于</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x = y</td><td align="center"></td></tr><tr><td align="center">+=</td><td align="center">x += y</td><td align="center">x = x + y</td></tr><tr><td align="center">-=</td><td align="center">x -= y</td><td align="center">x = x - y</td></tr><tr><td align="center">*=</td><td align="center">x *= y</td><td align="center">x = x * y</td></tr><tr><td align="center">/=</td><td align="center">x /= y</td><td align="center">x = x / y</td></tr><tr><td align="center">%=</td><td align="center">x %= y</td><td align="center">x = x % y</td></tr></tbody></table><h4 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;  &lt;=  &gt;  &gt;=</span><br></pre></td></tr></table></figure><p>js中特殊的比较运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>返回值</th></tr></thead><tbody><tr><td>==    等于</td><td>值相等时，返回true</td><td>5 == “5”</td><td>true</td></tr><tr><td>===  绝对等于</td><td>值和类型都等于时，返回true</td><td>5 ===’ 5’</td><td>false</td></tr><tr><td>!=     不等于</td><td>值不相等时，返回true</td><td>5 !== “5”</td><td>false</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr><tr><td>!==   不绝对等于</td><td>值和类型有一个不相等，或两个都不相等时返回true</td><td>5 !== “5”</td><td>true</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr></tbody></table><h4 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  ||  ! </span><br><span class="line">且   或  非</span><br></pre></td></tr></table></figure><h4 id="5、条件运算符"><a href="#5、条件运算符" class="headerlink" title="5、条件运算符"></a>5、条件运算符</h4><blockquote><ul><li><p>语法：条件表达式 ？表达式1 : 表达式2</p></li><li><p> 执行顺序：</p></li></ul><p>  条件运算符在执行时，会先对条件表达式进行求值判断，如果结果为true，则执行表达式1,如果结果为false，则执行表达式2 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = a &gt; b ? a : b  <span class="comment">//可以获取将a和b的最大值</span></span><br></pre></td></tr></table></figure><h3 id="九、流程控制"><a href="#九、流程控制" class="headerlink" title="九、流程控制"></a>九、流程控制</h3><h4 id="1、条件语句"><a href="#1、条件语句" class="headerlink" title="1、条件语句"></a>1、条件语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>####2、switch语句</p><p>注意：switch语句在执行时，会依次将switch后的表达式和case后的表达式进行**==全等比较==**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="attr">default</span>:   <span class="comment">// 如果所有的比较都是false，则执行default后的语句</span></span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h4 id="3、循环语句"><a href="#3、循环语句" class="headerlink" title="3、循环语句"></a>3、循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;循环体;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;循环体;&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"><span class="keyword">for</span>(循环变量赋初值；循环条件；循环变量增值)&#123;循环语句;&#125;</span><br></pre></td></tr></table></figure><h4 id="4、补充-while与do-while语句的比较"><a href="#4、补充-while与do-while语句的比较" class="headerlink" title="4、补充(while与do-while语句的比较)"></a>4、补充(while与do-while语句的比较)</h4><p>​    while语句是先判断再执行<br>​    do-while语句是先执行再判断<br>实质的区别：<br>​    do-while语句可以确保循环至少执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会打印一次</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">5</span>)</span><br><span class="line"><span class="comment">//不会打印</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的小站诞生啦</title>
      <link href="/2022/07/26/0_%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/07/26/0_%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="梦的开始"><a href="#梦的开始" class="headerlink" title="梦的开始"></a>梦的开始</h2><p>说起来都是缘分啊。大一下学期，几个同学拉我参加了易智瑞故事地图的制作，与学长交流沟通后，我第一次知道前端的存在，于是，也慢慢开始学起了html、css等等，中间也是磕磕绊绊的。期间也慢慢萌生了做个人博客的想法，一方面感觉真的超酷的，另一方面也是锻炼自己的能力，当然主要还是第一点，哈哈哈。</p><p>但真当我从零开始写起后，发现困难还是不少，毕竟很多知识还没有熟练地掌握，现有的知识储备也只能写一些很简陋的网站。最终，我决定了基于已有的框架hexo（Hexo 是一款基于 Node.js 的静态博客框架）来完成。以后我将不断更新内容，毕竟学习新语言的过程中，有条理的笔记真的很重要，另外也算是一种督促和记录吧。未来我也将持续地完善这个网站。</p><p>既然决定了，就要坚定的走下去啊。一起成长吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
