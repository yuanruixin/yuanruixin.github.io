<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js语言基础</title>
      <link href="/2022/08/28/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/28/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1、JS简介"><a href="#1、JS简介" class="headerlink" title="1、JS简介"></a>1、JS简介</h3><p>JavaScript是目前web开发中不可缺少的脚本语言，前端三件套之一。JS可以直接运行在浏览器端，增加网页的动态交互功能。测试版本叫LiveScript，但发布正式版时又被重命名为JavaScript。为什么命名为JavaScript呢？因为Java当时比较火，可以说是为了蹭一下Java的热度。</p><blockquote><p>ECMAScript为我们定义最基本的语法，像是数据类型（原始值、对象）、运算符、流程控制语句等内容。为了使JS可以适用于不同的场景，在不同的JS解释器中还为我们提供了不同的扩展以增强其功能。像是浏览器中的DOM、BOM使得我们可以通过JS操作网页和浏览器。NodeJS中的fs模块可以使我们直接操作计算机系统中的各种文件。所以我们学习JS时，除了要学习ES标准以外，还要学习它的各种扩展，才能在不同的环境中发挥出JS的最大威力</p></blockquote><h3 id="2、第一个js程序"><a href="#2、第一个js程序" class="headerlink" title="2、第一个js程序"></a>2、第一个js程序</h3><p>可以在html模板中的head标签写入下列代码，再用浏览器打开，即可运行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;哈哈哈哈&quot;</span>)<span class="comment">//弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你猜我在哪？&#x27;</span>)  <span class="comment">//在控制台打印</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;你猜我在哪？&#x27;</span>)<span class="comment">//写入到网页中</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、JS书写位置"><a href="#2、JS书写位置" class="headerlink" title="2、JS书写位置"></a>2、JS书写位置</h3><h4 id="2-1-内嵌式"><a href="#2-1-内嵌式" class="headerlink" title="2.1.内嵌式"></a>2.1.内嵌式</h4><p>可以在html模板中的head标签中书写script标签，然后将js书此script标签中,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>在这里书写语句吧<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-外链式"><a href="#2-2-外链式" class="headerlink" title="2.2.外链式"></a>2.2.外链式</h4><p>新建一个后缀名为.js的文件，然后在该文件中书写语句，再通过script标签引入到html网页中</p><script src="js文件路径地址">请不要在这里书写js语句</script><h4 id="2-3-行内式"><a href="#2-3-行内式" class="headerlink" title="2.3.行内式"></a>2.3.行内式</h4><p>也可以直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你点我干嘛&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、JS中的一些基础语法"><a href="#3、JS中的一些基础语法" class="headerlink" title="3、JS中的一些基础语法"></a>3、JS中的一些基础语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 注释：多行注释  <span class="comment">/**/</span>  </span><br><span class="line"> 单行注释  <span class="comment">//   </span></span><br><span class="line"><span class="number">3</span>、js严格区分大小写        </span><br><span class="line"><span class="number">4</span>、js中每一条代码都应该以分号结尾，如果没有写，解释器会自动进行添加。不过某些特殊情况下，会添加错误。</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h3 id="4、变量和常量"><a href="#4、变量和常量" class="headerlink" title="4、变量和常量"></a>4、变量和常量</h3><p>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型。</p><h4 id="4-1、声明"><a href="#4-1、声明" class="headerlink" title="4.1、声明"></a>4.1、声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var与let都是声明变量，最好不要使用var</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;我是一个字符串&#x27;</span> </span><br><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">20</span>   </span><br></pre></td></tr></table></figure><h4 id="4-2、注意事项"><a href="#4-2、注意事项" class="headerlink" title="4.2、注意事项"></a>4.2、注意事项</h4><ul><li>用let，而不要使用var（var本身存在很多问题，记得用 let 就完了）</li><li>变量并不存储任何值，而是存储值的内存地址</li></ul><h3 id="5、数据类型与类型检查"><a href="#5、数据类型与类型检查" class="headerlink" title="5、数据类型与类型检查"></a>5、数据类型与类型检查</h3><h4 id="5-1、基本类型"><a href="#5-1、基本类型" class="headerlink" title="5.1、基本类型"></a>5.1、基本类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数值型(<span class="title class_">Number</span>):  <span class="comment">//存储很大或很小的数时无法准确显示</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>     <span class="comment">//NaN也是一个特殊的数值,表示非法的数值</span></span><br><span class="line"><span class="number">2.</span>大整数(<span class="title class_">BigInt</span>):  <span class="comment">//以n结尾，可表示的数字范围是无穷大</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9999999999999999n</span></span><br><span class="line"><span class="number">3.</span>字符串(<span class="title class_">String</span>): <span class="comment">//使用单引号或双引号</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;我是字符串&quot;</span></span><br><span class="line"><span class="number">4.</span>布尔(<span class="title class_">Boolean</span>):  </span><br><span class="line"><span class="keyword">let</span> i = <span class="literal">true</span></span><br><span class="line"><span class="number">5.</span>空值(<span class="title class_">Null</span>):</span><br><span class="line"><span class="keyword">let</span> j = <span class="literal">null</span></span><br><span class="line"><span class="number">6.</span>未定义(<span class="title class_">Undefined</span>)<span class="comment">//当声明一个变量而没有赋值时，它的值就是Undefined</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="number">7.</span>符号(<span class="title class_">Symbol</span>)<span class="comment">//用来创建一个唯一的标识 </span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title class_">Symbol</span>(<span class="string">&quot;我是一个符号&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="5-2、typeof类型检查"><a href="#5-2、typeof类型检查" class="headerlink" title="5.2、typeof类型检查"></a>5.2、typeof类型检查</h5><table><thead><tr><th align="center">a定义的值(let a =)</th><th align="center">typeof a的返回值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">number</td></tr><tr><td align="center">9999999999999999n</td><td align="center">bigint</td></tr><tr><td align="center">true</td><td align="center">boolean</td></tr><tr><td align="center">null</td><td align="center">object</td></tr><tr><td align="center">不进行定义</td><td align="center">undefined</td></tr><tr><td align="center">Symbol(“创建符号”)</td><td align="center">symbol</td></tr></tbody></table><p>注：由于js历史遗留问题，编辑器会将null作为object类型处</p><h3 id="6、类型转换"><a href="#6、类型转换" class="headerlink" title="6、类型转换"></a>6、类型转换</h3><h4 id="6-1、显式转换"><a href="#6-1、显式转换" class="headerlink" title="6.1、显式转换"></a>6.1、显式转换</h4><p>显示转换一般指使用<strong>Number</strong>、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。还有专门将字符串转换为数值的方法，如parseInt、parseFloat等</p><ul><li><strong>Number函数：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>String函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Boolean函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>parseInt与parseFloat函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;3.1415&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">parseInt</span>(a)   <span class="comment">//b = 3</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">parseFloat</span>(c) <span class="comment">//c = 3.1415</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2、简单聊聊隐式转换"><a href="#6-2、简单聊聊隐式转换" class="headerlink" title="6.2、简单聊聊隐式转换"></a>6.2、简单聊聊隐式转换</h4><blockquote><p>#####隐式类型转换是在一定场景下，js 运行环境自动调用ToString、ToNumber、ToBoolean、ToPrimitive这几个方法，尝试转换成期望的数据类型。</p></blockquote><table><thead><tr><th>转化类型</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>转换成 String</td><td>+ ‘任意字符串’</td><td>任意值与字符串相加，会先将其他值转换为字符串，然后拼接</td></tr><tr><td>转换成 Number</td><td>(自增自减运算符)  (减、乘、除) (关系运算符)</td><td>转换为 Number 再进行运算</td></tr><tr><td>转换为Boolean</td><td>! (逻辑非运算符)</td><td>自动转换为Boolean</td></tr></tbody></table><p><strong>任意值与字符串相加的例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> + <span class="string">&#x27;5&#x27;</span> <span class="comment">// &quot;10&quot; + &quot;5&quot;  会返回&quot;105&quot;</span></span><br></pre></td></tr></table></figure><p>其他的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> - <span class="string">&#x27;5&#x27;</span> <span class="comment">// 10 - 5</span></span><br><span class="line">a = <span class="string">&quot;5&quot;</span> % <span class="number">2</span>   <span class="comment">// 5 % 2</span></span><br><span class="line">a = <span class="number">10</span> + <span class="literal">true</span> <span class="comment">// 10 + 1</span></span><br><span class="line">a = <span class="number">5</span> + <span class="literal">null</span> <span class="comment">// 5 + 0</span></span><br><span class="line">a = <span class="number">6</span> - <span class="literal">undefined</span> <span class="comment">// 6 - NaN</span></span><br></pre></td></tr></table></figure><h3 id="7、运算符"><a href="#7、运算符" class="headerlink" title="7、运算符"></a>7、运算符</h3><h4 id="7-1、算数运算符"><a href="#7-1、算数运算符" class="headerlink" title="7.1、算数运算符"></a>7.1、算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * /  ++  --  %</span><br><span class="line">加减乘除 自加 自减 取模</span><br></pre></td></tr></table></figure><h4 id="7-2、赋值运算符"><a href="#7-2、赋值运算符" class="headerlink" title="7.2、赋值运算符"></a>7.2、赋值运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">例子</th><th align="center">等同于</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x = y</td><td align="center"></td></tr><tr><td align="center">+=</td><td align="center">x += y</td><td align="center">x = x + y</td></tr><tr><td align="center">-=</td><td align="center">x -= y</td><td align="center">x = x - y</td></tr><tr><td align="center">*=</td><td align="center">x *= y</td><td align="center">x = x * y</td></tr><tr><td align="center">/=</td><td align="center">x /= y</td><td align="center">x = x / y</td></tr><tr><td align="center">%=</td><td align="center">x %= y</td><td align="center">x = x % y</td></tr></tbody></table><h4 id="7-3、比较运算符"><a href="#7-3、比较运算符" class="headerlink" title="7.3、比较运算符"></a>7.3、比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;  &lt;=  &gt;  &gt;=</span><br></pre></td></tr></table></figure><p>js中特殊的比较运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>返回值</th></tr></thead><tbody><tr><td>==    等于</td><td>值相等时，返回true</td><td>5 == “5”</td><td>true</td></tr><tr><td>===  绝对等于</td><td>值和类型都等于时，返回true</td><td>5 ===’ 5’</td><td>false</td></tr><tr><td>!=     不等于</td><td>值不相等时，返回true</td><td>5 !== “5”</td><td>false</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr><tr><td>!==   不绝对等于</td><td>值和类型有一个不相等，或两个都不相等时返回true</td><td>5 !== “5”</td><td>true</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr></tbody></table><h4 id="7-4、逻辑运算符"><a href="#7-4、逻辑运算符" class="headerlink" title="7.4、逻辑运算符"></a>7.4、逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  ||  ! </span><br><span class="line">且   或  非</span><br></pre></td></tr></table></figure><h4 id="7-5、条件运算符"><a href="#7-5、条件运算符" class="headerlink" title="7.5、条件运算符"></a>7.5、条件运算符</h4><blockquote><ul><li><p>语法：条件表达式 ？表达式1 : 表达式2</p></li><li><p> 执行顺序：</p></li></ul><p>  条件运算符在执行时，会先对条件表达式进行求值判断，如果结果为true，则执行表达式1,如果结果为false，则执行表达式2 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = a &gt; b ? a : b  <span class="comment">//可以获取将a和b的最大值</span></span><br></pre></td></tr></table></figure><h3 id="8、流程控制"><a href="#8、流程控制" class="headerlink" title="8、流程控制"></a>8、流程控制</h3><h4 id="8-1-条件语句"><a href="#8-1-条件语句" class="headerlink" title="8.1 条件语句"></a>8.1 条件语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>####8.2 switch语句</p><p>注意：switch语句在执行时，会依次将switch后的表达式和case后的表达式进行**==全等比较==**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="attr">default</span>:   <span class="comment">// 如果所有的比较都是false，则执行default后的语句</span></span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h4 id="8-3、循环语句"><a href="#8-3、循环语句" class="headerlink" title="8.3、循环语句"></a>8.3、循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;循环体;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;循环体;&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"><span class="keyword">for</span>(循环变量赋初值；循环条件；循环变量增值)&#123;循环语句;&#125;</span><br></pre></td></tr></table></figure><h4 id="补充-while与do-while语句的比较"><a href="#补充-while与do-while语句的比较" class="headerlink" title="补充(while与do-while语句的比较)"></a>补充(while与do-while语句的比较)</h4><p>​    while语句是先判断再执行<br>​    do-while语句是先执行再判断<br>实质的区别：<br>​    do-while语句可以确保循环至少执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会打印一次</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">5</span>)</span><br><span class="line"><span class="comment">//不会打印</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的小站诞生啦</title>
      <link href="/2022/07/28/%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/07/28/%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="梦的开始"><a href="#梦的开始" class="headerlink" title="梦的开始"></a>梦的开始</h2><p>说起来都是缘分啊。大一下学期，几个同学拉我参加了易智瑞故事地图的制作，与学长交流沟通后，我第一次知道前端的存在，于是，也慢慢开始学起了html、css等等，中间也是磕磕绊绊的。期间也慢慢萌生了做个人博客的想法，一方面感觉真的超酷的，另一方面也是锻炼自己的能力，当然主要还是第一点，哈哈哈。</p><p>但真当我从零开始写起后，发现困难还是不少，毕竟很多知识还没有熟练地掌握，现有的知识储备也只能写一些很简陋的网站。最终，我决定了基于已有的框架hexo（Hexo 是一款基于 Node.js 的静态博客框架）来完成。以后我将不断更新内容，毕竟学习新语言的过程中，有条理的笔记真的很重要，另外也算是一种督促和记录吧。未来我也将持续完善这个网站。</p><p>既然决定了，就要坚定的走下去啊。一起成长吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
