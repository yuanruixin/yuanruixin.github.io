<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js语言基础（三）—— 面向对象编程</title>
      <link href="/2022/08/28/1.3_JavaScrip%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/08/28/1.3_JavaScrip%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h3><blockquote><p>对象是JS中的一种复合数据类型，它相当于一个容器，在对象中可以存储各种不同类型数据</p></blockquote><h4 id="1-1、创建对象"><a href="#1-1、创建对象" class="headerlink" title="1.1、创建对象"></a>1.1、创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Object()方法创建</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">//通过字面量法创建对象</span></span><br><span class="line"><span class="keyword">let</span> obj2 =&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2、对象的属性"><a href="#1-2、对象的属性" class="headerlink" title="1.2、对象的属性"></a>1.2、对象的属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//续1.1</span></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>) <span class="comment">//打印 &quot;张三&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-3、遍历对象中的属性"><a href="#1-3、遍历对象中的属性" class="headerlink" title="1.3、遍历对象中的属性"></a>1.3、遍历对象中的属性</h3><p>通过for-in语句可以获取对象中的属性</p><p>注：并不是所有属性都可以被枚举</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//续1.1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(i, obj2[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4、改变量与改变对象"><a href="#1-4、改变量与改变对象" class="headerlink" title="1.4、改变量与改变对象"></a>1.4、改变量与改变对象</h4><ul><li><p>修改对象时，如果有其他变量指向该对象则所有指向该对象的变量都会受到影响</p></li><li><p>修改变量修改变量时，只会影响当前的变量</p></li></ul><blockquote><p>   在使用变量存储对象时，很容易因为改变变量指向的对象，提高代码的复杂度。所以通常情况下，声明存储对象的变量时会使用const</p><p>   <strong>注意：</strong> const只是禁止变量被重新赋值，对对象的修改没有任何影响</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj</span><br><span class="line">obj2 = <span class="literal">null</span> <span class="comment">//此时obj不会改变</span></span><br><span class="line"><span class="comment">//修改对象</span></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span> <span class="comment">//此时obj也会跟着改变</span></span><br></pre></td></tr></table></figure><h4 id="1-5、方法"><a href="#1-5、方法" class="headerlink" title="1.5、方法"></a>1.5、方法</h4><blockquote><p>当一个对象的属性指向一个函数，那么我们就称这个函数是该对象的方法，调用函数就称为调用对象的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">sayHello = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="2、面向对象编程"><a href="#2、面向对象编程" class="headerlink" title="2、面向对象编程"></a>2、面向对象编程</h3><blockquote><p>一个事物抽象到程序中后就变成了对象，在程序的世界中，一切皆对象。面向对象的编程指，程序中的所有操作都是通过对象来完成。做任何事情之前都需要先找到它的对象，然后通过对象来完成各种操作。</p><p>三大特性：封装(安全性)、继承(扩展性)、多态(灵活性)</p></blockquote><p>​    一个事物通常由两部分组成：数据和功能<br>​    一个对象由两部分组成：属性和方法<br>​            事物的数据到了对象中，体现为属性；事物的功能到了对象中，体现为方法</p><h4 id="2-1、创建类"><a href="#2-1、创建类" class="headerlink" title="2.1、创建类"></a>2.1、创建类</h4><blockquote><p>类是对象模板，可以将对象中的属性和方法直接定义在类中定义后，就可以直接通过类来批量创建对象。</p><p>通过同一个类创建的对象，我们称为同类对象。可以使用instanceof来检查一个对象是否是由某个类创建如果某个对象是由某个类所创建，则我们称该对象是这个类的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Peoson</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用构造函数创建对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h4 id="2-2、构造函数"><a href="#2-2、构造函数" class="headerlink" title="2.2、构造函数"></a>2.2、构造函数</h4><blockquote><p>在类中可以添加一个特殊方法constructor，这个方法我们称为构造函数，它会在我们调用类创建对象时执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&quot;构造函数执行了~&quot;, name, age, gender)</span></span><br><span class="line"><span class="comment">// 可以在构造函数中，为实例属性进行赋值</span></span><br><span class="line"><span class="comment">// 在构造函数中，this表示当前所创建的对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3、封装"><a href="#2-3、封装" class="headerlink" title="2.3、封装"></a>2.3、封装</h4><ul><li><p>对象不仅存储属性，还要负责数据的安全，直接添加到对象中的属性并不安全，因为他们可以被随意修改。这时我们就要通过封装确保数据的安全，这样数据就只能在类内部使用</p></li><li><p>实现方式：1、属性私有化 前加#  2、通过getter和setter方法来操作属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">#name    <span class="comment">//首先我们哟啊声明一个私有属性</span></span><br><span class="line">#age</span><br><span class="line">#gender</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#name = name</span><br><span class="line">    <span class="variable language_">this</span>.#age = age</span><br><span class="line">    <span class="variable language_">this</span>.#gender = gender</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">// getter方法，用来读取属性</span></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#name</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//setter方法，用来设置属性</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name</span><br><span class="line">     &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>)</span><br><span class="line">p1.<span class="title function_">setName</span>(<span class="number">12</span>) <span class="comment">//设置</span></span><br><span class="line">p1.<span class="title function_">getName</span>()   <span class="comment">//读取</span></span><br></pre></td></tr></table></figure><h4 id="2-4、多态"><a href="#2-4、多态" class="headerlink" title="2.4、多态"></a>2.4、多态</h4><blockquote><p><strong>多态</strong>：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果</p></blockquote><h4 id="2-5、继承"><a href="#2-5、继承" class="headerlink" title="2.5、继承"></a>2.5、继承</h4><blockquote><p>可以通过extends关键来完成继承<br>​        - 当一个类继承另一个类时，就相当于将另一个类中的代码复制到了当前类中（简单理解）<br>​        - 继承发生时，被继承的类称为 父类（超类），继承的类称为 子类<br>​        - 通过继承可以减少重复的代码，并且可以在不修改一个类的前提对其进行扩展</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动物在叫~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;汤姆&quot;</span>)</span><br><span class="line">dog.<span class="title function_">sayHello</span>()    <span class="comment">//输出：动物在叫</span></span><br><span class="line">cat.<span class="title function_">sayHello</span>()  <span class="comment">//输出：动物在叫</span></span><br></pre></td></tr></table></figure><h4 id="2-6、原型对象"><a href="#2-6、原型对象" class="headerlink" title="2.6、原型对象"></a>2.6、原型对象</h4><blockquote><p>在JavaScript中，我们创建一个函数A(就是声明一个函数), 那么浏览器就会在内存中创建一个对象B，而且每个函数都默认会有一个属性 prototype 指向了这个对象( 即：prototype的属性的值是这个对象 )。这个对象B就是函数A的原型对象，简称函数的原型。这个原型对象B 默认会有一个属性 constructor 指向了这个函数A ( 意思就是说：constructor属性的值是函数A )。</p></blockquote><ul><li><p>会添加到原型对象中的情况：<br>​        1.在类中通过xxx(){}方式添加的方法，位于原型中<br>​        2.主动向原型中添加的属性或方法</p></li><li><p><strong>注意</strong>：原型对象也有原型，这样就构成了一条原型链，根据对象复杂程度不同，原型链的长度也不同</p><ul><li><strong>原型链：</strong>读取对象属性时，会优先对象自身属性， 如果对象中有，则使用，没有则去对象的原型中寻找。如果原型中有，则使用，没有则去原型的原型中寻找，直到找到Object对象的原型（Object的原型没有原型（为null））。 如果依然没有找到，则返回undefined。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,我是&quot;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//访问一个对象的原型对象   对象.__proto__  或 Object.getPrototypeOf(对象)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>原型链：</strong>读取对象属性时，会优先对象自身属性， 如果对象中有，则使用，没有则去对象的原型中寻找。如果原型中有，则使用，没有则去原型的原型中寻找，直到找到Object对象的原型（Object的原型没有原型（为null））。 如果依然没有找到，则返回undefined。<br>​           例： p对象的原型链：p对象 –&gt; 原型 –&gt; 原型 –&gt; nul   ； obj对象的原型链：obj对象 –&gt; 原型 –&gt; null</p><h5 id="2-6-1、原型对象的作用"><a href="#2-6-1、原型对象的作用" class="headerlink" title="2.6.1、原型对象的作用"></a>2.6.1、原型对象的作用</h5><blockquote><ul><li><p>原型就相当于是一个公共的区域，可以被所有该类实例访问，可以将该类实例中，所有的公共属性（方法）统一存储到原型中这样我们只需要创建一个属性，即可被所有实例访问</p></li><li><p>JS中继承就是通过原型来实现的,<br>当继承时，子类的原型就是一个父类的实例</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TomCat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Cat</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型链</span></span><br><span class="line"><span class="comment">// TomCat --&gt; cat --&gt; Animal实例 --&gt; object --&gt; Object原型 --&gt; null</span></span><br><span class="line"><span class="comment">// cat --&gt; Animal实例 --&gt; object --&gt; Object原型 --&gt; null</span></span><br></pre></td></tr></table></figure><h5 id="2-6-2、修改原型"><a href="#2-6-2、修改原型" class="headerlink" title="2.6.2、修改原型"></a>2.6.2、修改原型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> name = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">     age = <span class="number">18</span></span><br><span class="line">     <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello，我是&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;          </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fly</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在飞！&quot;</span>)</span><br><span class="line">&#125;     <span class="comment">//这段代码将为构造函数的 prototype 属性添加一个新的方法：</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="title function_">fly</span>()</span><br><span class="line">p2.<span class="title function_">fly</span>()</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">大部分情况下，我们是不需要修改原型对象</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">千万不要通过类的实例去修改原型</span></span><br><span class="line"><span class="comment">1. 通过一个对象影响所有同类对象，这么做不合适</span></span><br><span class="line"><span class="comment">2. 修改原型先得创建实例，麻烦</span></span><br><span class="line"><span class="comment">3. 危险</span></span><br><span class="line"><span class="comment">除了通过__proto__能访问对象的原型外，还可以通过类的prototype属性，来访问实例的原型</span></span><br><span class="line"><span class="comment">修改原型时，最好通过通过类去修改</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1. 一修改就是修改所有实例的原型</span></span><br><span class="line"><span class="comment">2. 无需创建实例即可完成对类的修改</span></span><br><span class="line"><span class="comment">原则：</span></span><br><span class="line"><span class="comment">1. 原型尽量不要手动改</span></span><br><span class="line"><span class="comment">2. 要改也不要通过实例对象去改</span></span><br><span class="line"><span class="comment">3. 通过 类.prototype 属性去修改</span></span><br><span class="line"><span class="comment">4. 最好不要直接给prototype去赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础(二) —— 基本函数的使用</title>
      <link href="/2022/08/28/1.2_%E5%87%BD%E6%95%B0/"/>
      <url>/2022/08/28/1.2_%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1、函数的创建"><a href="#1、函数的创建" class="headerlink" title="1、函数的创建"></a>1、函数的创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">函数的定义方式：</span><br><span class="line"><span class="number">1.</span>函数声明</span><br><span class="line"> <span class="keyword">function</span> 函数名([参数])&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>函数表达式</span><br><span class="line"><span class="keyword">const</span> 变量 = <span class="keyword">function</span>(<span class="params">[参数]</span>)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>箭头函数  <span class="comment">//当箭头函数只有一个参数时，可以省略括号</span></span><br><span class="line">([参数]) =&gt; &#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、函数的参数"><a href="#2、函数的参数" class="headerlink" title="2、函数的参数"></a>2、函数的参数</h3><blockquote><ul><li>形式参数<br>在定义函数时，可以在函数中指定数量不等的形式参数（形参）<br>在函数中定义形参，就相当于在函数内部声明了对应的变量但是没有赋值</li><li>实际参数<br>在调用函数时，可以在函数的()传递数量不等的实参<br>实参会赋值给其对应的形参</li><li>参数：<br>1.如果实参和形参数量相同，则对应的实参赋值给对应的形参<br>2.如果实参多余形参，则多余的实参不会使用<br>3.如果形参多余实参，则多余的形参为undefined</li><li>参数的类型：JS中不会检查参数的类型，可以传递任何类型的值作为参数</li></ul></blockquote><h4 id="2-1、对象作为参数"><a href="#2-1、对象作为参数" class="headerlink" title="2.1、对象作为参数"></a>2.1、对象作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span><br><span class="line">     a.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>&#125;</span><br><span class="line"><span class="title function_">fn</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="2-2、函数作为参数"><a href="#2-2、函数作为参数" class="headerlink" title="2.2、函数作为参数"></a>2.2、函数作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是fn2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(fn2)</span><br></pre></td></tr></table></figure><h3 id="3、函数的返回值"><a href="#3、函数的返回值" class="headerlink" title="3、函数的返回值"></a>3、函数的返回值</h3><blockquote><ul><li>在函数中，可以通过return关键字来指定函数的返回值<br>​         返回值就是函数的执行结果，函数调用完毕返回值便会作为结果返回</li><li>任何值都可以作为返回值使用（包括对象和函数之类）<br>​         如果return后不跟任何值，则相当于返回undefined<br>​         如果不写return，那么函数的返回值依然是undefined</li><li>return一执行函数立即结束，后面的语句不再执行</li></ul></blockquote><p><strong>补充</strong>：箭头函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//箭头函数的返回值可以直接写在箭头后</span></span><br><span class="line"> <span class="comment">//如果直接在箭头后设置对象字面量为返回值时，对象字面量必须使用()括起来</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; (&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line">result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="4、作用域"><a href="#4、作用域" class="headerlink" title="4、作用域"></a>4、作用域</h3><blockquote><p>作用域指的是一个变量的可见区域，包括全局作用域与局部作用域</p><ul><li>全局作用域<br>全局作用域在网页运行时创建，在网页关闭时消耗<br>所有直接编写到script标签中的代码都位于全局作用域中<br>全局作用域中的变量是全局变量，可以在任意位置访问</li><li>局部作用域<pre><code> 块作用域    块作用域是一种局部作用域，在代码块执行时创建，代码块执行完毕它就销毁    在块作用域中声明的变量是局部变量，只能在块内部访问，外部无法访问</code></pre></li></ul></blockquote><h4 id="4-1、函数作用域"><a href="#4-1、函数作用域" class="headerlink" title="4.1、函数作用域"></a>4.1、函数作用域</h4><blockquote><p>函数作用域也是一种局部作用域。函数作用域在函数调用时产生，调用结束后销毁<br>函数每次调用都会产生一个全新的函数作用域。在函数中定义的变量是局部变量，只能在函数内部访问，外部无法访问</p></blockquote><h4 id="4-2、函数作用域链"><a href="#4-2、函数作用域链" class="headerlink" title="4.2、函数作用域链"></a>4.2、函数作用域链</h4><blockquote><p>   - 当我们使用一个变量时，<br>​           JS解释器会优先在当前作用域中寻找变量，<br>​            如果找到了则直接使用。如果没找到，则去上一层作用域中寻找，找到了则使用<br>​            如果还没找到，则继续去上一层寻找，以此类推<br>​            如果一直到全局作用域都没找到，则报错 xxx is not defined</p></blockquote><h3 id="5、立即执行函数"><a href="#5、立即执行函数" class="headerlink" title="5、立即执行函数"></a>5、立即执行函数</h3><blockquote><p>   - 立即执行函数是一个匿名的函数，并它只会调用一次<br>​   - 可以利用IIFE来创建一个一次性的函数作用域，避免变量冲突的问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> let a = 10</span><br><span class="line">    console.log(111)</span><br><span class="line">&#125;());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、window对象"><a href="#6、window对象" class="headerlink" title="6、window对象"></a>6、window对象</h3><blockquote><p>在浏览器中，浏览器为我们提供了一个window对象，可以直接访问</p><p>window对象代表的是浏览器窗口，通过该对象可以对浏览器窗口进行各种操作<br>除此之外window对象还负责存储JS中的内置对象和浏览器的宿主对象</p><p>window对象的属性可以通过window对象访问，也可以直接访问</p><p>函数就可以认为是window对象的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">10</span> <span class="comment">//向window对象中添加的属性会自动变成全局变量</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   var 用来声明变量，作用和let相同，但是var不具有块作用域</span></span><br><span class="line"><span class="comment">        - 在全局中使用var声明的变量，都会作为window对象的属性保存</span></span><br><span class="line"><span class="comment">        - 使用function声明的函数，都会作为window的方法保存</span></span><br><span class="line"><span class="comment">        - 使用let声明的变量不会存储在window对象中，而存在一个秘密的小地方（无法访问）</span></span><br><span class="line"><span class="comment">        - var虽然没有块作用域，但有函数作用域</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="7、this"><a href="#7、this" class="headerlink" title="7、this"></a>7、this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*this</span></span><br><span class="line"><span class="comment"> - 函数在执行时，JS解析器每次都会传递进一个隐含的参数</span></span><br><span class="line"><span class="comment">     - 这个参数就叫做 this</span></span><br><span class="line"><span class="comment">     - this会指向一个对象</span></span><br><span class="line"><span class="comment">     - this所指向的对象会根据函数调用方式的不同而不同</span></span><br><span class="line"><span class="comment">         1.以函数形式调用时，this指向的是window</span></span><br><span class="line"><span class="comment">            2.以方法的形式调用时，this指向的是调用方法的对象</span></span><br><span class="line"><span class="comment">              ...</span></span><br><span class="line"><span class="comment"> - 通过this可以在方法中引用调用方法的对象 */</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)  </span><br><span class="line">     &#125;,</span><br><span class="line">&#125; </span><br><span class="line">obj.<span class="title function_">sayHello</span>() <span class="comment">//调用时，this就是obj</span></span><br></pre></td></tr></table></figure><h3 id="8、箭头函数补充"><a href="#8、箭头函数补充" class="headerlink" title="8、箭头函数补充"></a>8、箭头函数补充</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、无参箭头函数：() =&gt; 返回值</span><br><span class="line"><span class="number">2</span>、一个参数的：a =&gt; 返回值</span><br><span class="line"><span class="number">3</span>、多个参数的：(a, b) =&gt; 返回值</span><br><span class="line"><span class="number">4</span>、只有一个语句的函数：() =&gt; 返回值</span><br><span class="line"><span class="number">5</span>、只返回一个对象的函数：() =&gt; (&#123;...&#125;)</span><br><span class="line"><span class="number">6</span>、有多行语句的函数：() =&gt; &#123;</span><br><span class="line">                    ....    </span><br><span class="line">                    <span class="keyword">return</span> 返回值</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语言基础（一）—— 基础知识</title>
      <link href="/2022/08/28/1.1_JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/28/1.1_JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1、JS简介"><a href="#1、JS简介" class="headerlink" title="1、JS简介"></a>1、JS简介</h3><p>JavaScript是目前web开发中不可缺少的脚本语言，前端三件套之一。JS可以直接运行在浏览器端，增加网页的动态交互功能。测试版本叫LiveScript，但发布正式版时又被重命名为JavaScript。为什么命名为JavaScript呢？因为Java当时比较火，可以说是为了蹭一下Java的热度。 </p><blockquote><p>ECMAScript为我们定义最基本的语法，像是数据类型（原始值、对象）、运算符、流程控制语句等内容。为了使JS可以适用于不同的场景，在不同的JS解释器中还为我们提供了不同的扩展以增强其功能。像是浏览器中的DOM、BOM使得我们可以通过JS操作网页和浏览器。NodeJS中的fs模块可以使我们直接操作计算机系统中的各种文件。所以我们学习JS时，除了要学习ES标准以外，还要学习它的各种扩展，才能在不同的环境中发挥出JS的最大威力</p></blockquote><h3 id="2、第一个js程序"><a href="#2、第一个js程序" class="headerlink" title="2、第一个js程序"></a>2、第一个js程序</h3><p>可以在html模板中的head标签写入下列代码，再用浏览器打开，即可运行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;哈哈哈哈&quot;</span>)<span class="comment">//弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你猜我在哪？&#x27;</span>)  <span class="comment">//在控制台打印</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;你猜我在哪？&#x27;</span>)<span class="comment">//写入到网页中</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、JS书写位置"><a href="#2、JS书写位置" class="headerlink" title="2、JS书写位置"></a>2、JS书写位置</h3><h4 id="2-1-内嵌式"><a href="#2-1-内嵌式" class="headerlink" title="2.1.内嵌式"></a>2.1.内嵌式</h4><p>可以在html模板中的head标签中书写script标签，然后将js书此script标签中,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>在这里书写语句吧<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-外链式"><a href="#2-2-外链式" class="headerlink" title="2.2.外链式"></a>2.2.外链式</h4><p>新建一个后缀名为.js的文件，然后在该文件中书写语句，再通过script标签引入到html网页中</p><script src="js文件路径地址">请不要在这里书写js语句</script><h4 id="2-3-行内式"><a href="#2-3-行内式" class="headerlink" title="2.3.行内式"></a>2.3.行内式</h4><p>也可以直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你点我干嘛&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、JS中的一些基础语法"><a href="#3、JS中的一些基础语法" class="headerlink" title="3、JS中的一些基础语法"></a>3、JS中的一些基础语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 注释：多行注释  <span class="comment">/**/</span>  </span><br><span class="line"> 单行注释  <span class="comment">//   </span></span><br><span class="line"><span class="number">3</span>、js严格区分大小写        </span><br><span class="line"><span class="number">4</span>、js中每一条代码都应该以分号结尾，如果没有写，解释器会自动进行添加。不过某些特殊情况下，会添加错误。</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h3 id="4、变量和常量"><a href="#4、变量和常量" class="headerlink" title="4、变量和常量"></a>4、变量和常量</h3><p>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型。</p><h4 id="4-1、声明"><a href="#4-1、声明" class="headerlink" title="4.1、声明"></a>4.1、声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var与let都是声明变量，最好不要使用var</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;我是一个字符串&#x27;</span> </span><br><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">20</span>   </span><br></pre></td></tr></table></figure><h4 id="4-2、注意事项"><a href="#4-2、注意事项" class="headerlink" title="4.2、注意事项"></a>4.2、注意事项</h4><ul><li>用let，而不要使用var（var本身存在很多问题，记得用 let 就完了）</li><li>变量并不存储任何值，而是存储值的内存地址</li></ul><h3 id="5、数据类型与类型检查"><a href="#5、数据类型与类型检查" class="headerlink" title="5、数据类型与类型检查"></a>5、数据类型与类型检查</h3><h4 id="5-1、基本类型"><a href="#5-1、基本类型" class="headerlink" title="5.1、基本类型"></a>5.1、基本类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数值型(<span class="title class_">Number</span>):  <span class="comment">//存储很大或很小的数时无法准确显示</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>     <span class="comment">//NaN也是一个特殊的数值,表示非法的数值</span></span><br><span class="line"><span class="number">2.</span>大整数(<span class="title class_">BigInt</span>):  <span class="comment">//以n结尾，可表示的数字范围是无穷大</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9999999999999999n</span></span><br><span class="line"><span class="number">3.</span>字符串(<span class="title class_">String</span>): <span class="comment">//使用单引号或双引号</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;我是字符串&quot;</span></span><br><span class="line"><span class="number">4.</span>布尔(<span class="title class_">Boolean</span>):  </span><br><span class="line"><span class="keyword">let</span> i = <span class="literal">true</span></span><br><span class="line"><span class="number">5.</span>空值(<span class="title class_">Null</span>):</span><br><span class="line"><span class="keyword">let</span> j = <span class="literal">null</span></span><br><span class="line"><span class="number">6.</span>未定义(<span class="title class_">Undefined</span>)<span class="comment">//当声明一个变量而没有赋值时，它的值就是Undefined</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="number">7.</span>符号(<span class="title class_">Symbol</span>)<span class="comment">//用来创建一个唯一的标识 </span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title class_">Symbol</span>(<span class="string">&quot;我是一个符号&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="5-2、typeof类型检查"><a href="#5-2、typeof类型检查" class="headerlink" title="5.2、typeof类型检查"></a>5.2、typeof类型检查</h5><table><thead><tr><th align="center">a定义的值(let a =)</th><th align="center">typeof a的返回值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">number</td></tr><tr><td align="center">9999999999999999n</td><td align="center">bigint</td></tr><tr><td align="center">true</td><td align="center">boolean</td></tr><tr><td align="center">null</td><td align="center">object</td></tr><tr><td align="center">不进行定义</td><td align="center">undefined</td></tr><tr><td align="center">Symbol(“创建符号”)</td><td align="center">symbol</td></tr></tbody></table><p>注：由于js历史遗留问题，编辑器会将null作为object类型处</p><h3 id="6、类型转换"><a href="#6、类型转换" class="headerlink" title="6、类型转换"></a>6、类型转换</h3><h4 id="6-1、显式转换"><a href="#6-1、显式转换" class="headerlink" title="6.1、显式转换"></a>6.1、显式转换</h4><p>显示转换一般指使用<strong>Number</strong>、String和Boolean三个构造函数，手动将各种类型的值，转换成数字、字符串或者布尔值。还有专门将字符串转换为数值的方法，如parseInt、parseFloat等</p><ul><li><strong>Number函数：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>String函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">1234</span>)  <span class="comment">// &quot;1234&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Boolean函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>parseInt与parseFloat函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;3.1415&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">parseInt</span>(a)   <span class="comment">//b = 3</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">parseFloat</span>(c) <span class="comment">//c = 3.1415</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2、简单聊聊隐式转换"><a href="#6-2、简单聊聊隐式转换" class="headerlink" title="6.2、简单聊聊隐式转换"></a>6.2、简单聊聊隐式转换</h4><blockquote><p>#####隐式类型转换是在一定场景下，js 运行环境自动调用ToString、ToNumber、ToBoolean、ToPrimitive这几个方法，尝试转换成期望的数据类型。</p></blockquote><table><thead><tr><th>转化类型</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>转换成 String</td><td>+ ‘任意字符串’</td><td>任意值与字符串相加，会先将其他值转换为字符串，然后拼接</td></tr><tr><td>转换成 Number</td><td>(自增自减运算符)  (减、乘、除) (关系运算符)</td><td>转换为 Number 再进行运算</td></tr><tr><td>转换为Boolean</td><td>! (逻辑非运算符)</td><td>自动转换为Boolean</td></tr></tbody></table><p><strong>任意值与字符串相加的例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> + <span class="string">&#x27;5&#x27;</span> <span class="comment">// &quot;10&quot; + &quot;5&quot;  会返回&quot;105&quot;</span></span><br></pre></td></tr></table></figure><p>其他的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> - <span class="string">&#x27;5&#x27;</span> <span class="comment">// 10 - 5</span></span><br><span class="line">a = <span class="string">&quot;5&quot;</span> % <span class="number">2</span>   <span class="comment">// 5 % 2</span></span><br><span class="line">a = <span class="number">10</span> + <span class="literal">true</span> <span class="comment">// 10 + 1</span></span><br><span class="line">a = <span class="number">5</span> + <span class="literal">null</span> <span class="comment">// 5 + 0</span></span><br><span class="line">a = <span class="number">6</span> - <span class="literal">undefined</span> <span class="comment">// 6 - NaN</span></span><br></pre></td></tr></table></figure><h3 id="7、运算符"><a href="#7、运算符" class="headerlink" title="7、运算符"></a>7、运算符</h3><h4 id="7-1、算数运算符"><a href="#7-1、算数运算符" class="headerlink" title="7.1、算数运算符"></a>7.1、算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * /  ++  --  %</span><br><span class="line">加减乘除 自加 自减 取模</span><br></pre></td></tr></table></figure><h4 id="7-2、赋值运算符"><a href="#7-2、赋值运算符" class="headerlink" title="7.2、赋值运算符"></a>7.2、赋值运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">例子</th><th align="center">等同于</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x = y</td><td align="center"></td></tr><tr><td align="center">+=</td><td align="center">x += y</td><td align="center">x = x + y</td></tr><tr><td align="center">-=</td><td align="center">x -= y</td><td align="center">x = x - y</td></tr><tr><td align="center">*=</td><td align="center">x *= y</td><td align="center">x = x * y</td></tr><tr><td align="center">/=</td><td align="center">x /= y</td><td align="center">x = x / y</td></tr><tr><td align="center">%=</td><td align="center">x %= y</td><td align="center">x = x % y</td></tr></tbody></table><h4 id="7-3、比较运算符"><a href="#7-3、比较运算符" class="headerlink" title="7.3、比较运算符"></a>7.3、比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;  &lt;=  &gt;  &gt;=</span><br></pre></td></tr></table></figure><p>js中特殊的比较运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>返回值</th></tr></thead><tbody><tr><td>==    等于</td><td>值相等时，返回true</td><td>5 == “5”</td><td>true</td></tr><tr><td>===  绝对等于</td><td>值和类型都等于时，返回true</td><td>5 ===’ 5’</td><td>false</td></tr><tr><td>!=     不等于</td><td>值不相等时，返回true</td><td>5 !== “5”</td><td>false</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr><tr><td>!==   不绝对等于</td><td>值和类型有一个不相等，或两个都不相等时返回true</td><td>5 !== “5”</td><td>true</td></tr><tr><td></td><td></td><td>5 !== “4”</td><td>true</td></tr></tbody></table><h4 id="7-4、逻辑运算符"><a href="#7-4、逻辑运算符" class="headerlink" title="7.4、逻辑运算符"></a>7.4、逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  ||  ! </span><br><span class="line">且   或  非</span><br></pre></td></tr></table></figure><h4 id="7-5、条件运算符"><a href="#7-5、条件运算符" class="headerlink" title="7.5、条件运算符"></a>7.5、条件运算符</h4><blockquote><ul><li><p>语法：条件表达式 ？表达式1 : 表达式2</p></li><li><p> 执行顺序：</p></li></ul><p>  条件运算符在执行时，会先对条件表达式进行求值判断，如果结果为true，则执行表达式1,如果结果为false，则执行表达式2 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = a &gt; b ? a : b  <span class="comment">//可以获取将a和b的最大值</span></span><br></pre></td></tr></table></figure><h3 id="8、流程控制"><a href="#8、流程控制" class="headerlink" title="8、流程控制"></a>8、流程控制</h3><h4 id="8-1-条件语句"><a href="#8-1-条件语句" class="headerlink" title="8.1 条件语句"></a>8.1 条件语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    语句...</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>####8.2 switch语句</p><p>注意：switch语句在执行时，会依次将switch后的表达式和case后的表达式进行**==全等比较==**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="attr">default</span>:   <span class="comment">// 如果所有的比较都是false，则执行default后的语句</span></span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h4 id="8-3、循环语句"><a href="#8-3、循环语句" class="headerlink" title="8.3、循环语句"></a>8.3、循环语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;循环体;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;循环体;&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"><span class="keyword">for</span>(循环变量赋初值；循环条件；循环变量增值)&#123;循环语句;&#125;</span><br></pre></td></tr></table></figure><h4 id="补充-while与do-while语句的比较"><a href="#补充-while与do-while语句的比较" class="headerlink" title="补充(while与do-while语句的比较)"></a>补充(while与do-while语句的比较)</h4><p>​    while语句是先判断再执行<br>​    do-while语句是先执行再判断<br>实质的区别：<br>​    do-while语句可以确保循环至少执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会打印一次</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">5</span>)</span><br><span class="line"><span class="comment">//不会打印</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的小站诞生啦</title>
      <link href="/2022/07/28/0_%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/07/28/0_%E6%A2%A6%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="梦的开始"><a href="#梦的开始" class="headerlink" title="梦的开始"></a>梦的开始</h2><p>说起来都是缘分啊。大一下学期，几个同学拉我参加了易智瑞故事地图的制作，与学长交流沟通后，我第一次知道前端的存在，于是，也慢慢开始学起了html、css等等，中间也是磕磕绊绊的。期间也慢慢萌生了做个人博客的想法，一方面感觉真的超酷的，另一方面也是锻炼自己的能力，当然主要还是第一点，哈哈哈。</p><p>但真当我从零开始写起后，发现困难还是不少，毕竟很多知识还没有熟练地掌握，现有的知识储备也只能写一些很简陋的网站。最终，我决定了基于已有的框架hexo（Hexo 是一款基于 Node.js 的静态博客框架）来完成。以后我将不断更新内容，毕竟学习新语言的过程中，有条理的笔记真的很重要，另外也算是一种督促和记录吧。未来我也将持续完善这个网站。</p><p>既然决定了，就要坚定的走下去啊。一起成长吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
